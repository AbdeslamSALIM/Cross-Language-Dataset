L'algorithme MinMax est un algorithme qui s'applique à la théorie des jeux pour les jeux à deux joueurs à somme nulle.Il amène l'ordinateur à passer en revue toutes les possibilités pour un nombre limité de coups et à leur assigner une valeur qui prend en compte les bénéfices pour le joueur et pour son adversaire. Le meilleur choix est alors celui qui maximise ses bénéfices tout en minimisant ceux de son adversaire.Il existe différents algorithmes basés sur MinMax permettant d'optimiser la recherche du meilleur coup en limitant le nombre de nœuds visités dans l'arbre de jeu, le plus connu est l'élagage alpha-beta.PrincipeL'algorithme MinMax est très simple : on visite l'arbre de jeu pour faire remonter à la racine une valeur (appelée « valeur du jeu ») qui est calculée récursivement de la façon suivante :MinMax(p) = f(p) si p est une feuille de l’arbre où f est une fonction d’évaluation de la position du jeuMinMax(p) = MAX(MinMax(O_1), ..., MinMax(O_n)) si p est un nœud Joueur avec fils O_1, ..., O_nMinMax(p) = MIN(MinMax(O_1), ..., MinMax(O_n)) si p est un nœud Opposant avec fils O_1, ..., O_nExempleDans le schéma ci-dessus, les nœuds gris représentent les nœuds joueurs et les bleus les nœuds opposants. Pour déterminer la valeur du nœud A, on choisit la valeur maximum de l’ensemble des nœuds B (A est un nœud joueur). Il faut donc déterminer les valeurs des nœuds B qui reçoivent chacun la valeur minimum stockée dans leurs fils (nœuds B sont opposants). Les nœuds C sont des feuilles, leur valeur peut donc être calculée par la fonction d’évaluation.Le nœud A prend donc la valeur 5. Le joueur doit donc jouer le coup l’amenant en B2. En observant l’arbre, on comprend bien que l’algorithme considère que l’opposant va jouer de manière optimale : il prend le minimum. Sans ce prédicat, on choisirait le nœud C1 qui propose le plus grand gain et le prochain coup sélectionné amènerait en B1. Mais alors on prend le risque que l’opposant joue C3 qui propose seulement un gain de 3.En pratique, la valeur théorique de la position P ne pourra généralement pas être calculée. En conséquence, la fonction d’évaluation sera appliquée sur des positions non terminales. On considérera que plus la fonction d’évaluation est appliquée loin de la racine, meilleur est le résultat du calcul. C'est-à-dire qu’en examinant plus de coups successifs, nous supposons obtenir une meilleure approximation de la valeur théorique donc un meilleur choix de mouvement.Simplification NegaMaxSi l’ensemble des valeurs prises par f(p) est symétrique par rapport à 0 alors nous pouvons définir une fonction g(p) tel que :g(p) = f(p) si nous sommes sur un nœud joueurg(p) = - f(p) si nous sommes sur un nœud opposantAinsi on définit Negamax à partir de cette nouvelle fonction :Negamax(p) = g(p) si P est terminaleNegamax(p) = max(-NegaMax(p_i)) sinonÀ partir du même exemple que pour l’algorithme Minmax, voici l'arbre résultant :Optimisation Alpha BetaCet algorithme peut être optimisé grâce à l'implémentation de la technique dite : Élagage alpha-betaCatégorie:Théorie des jeux Catégorie:Algorithme d'optimisation Catégorie:Intelligence artificiellecs:Minimax (algoritmus) de:Minimax-Algorithmus en:Minimax es:Minimax he:עץ מינימקס id:Minimax it:Minimax ja:ミニマックス法 nl:Minimax pl:Algorytm min-max pt:Minimax ru:Минимаксный критерий uk:Мінімакс vi:Minimax zh:极小化极大算法