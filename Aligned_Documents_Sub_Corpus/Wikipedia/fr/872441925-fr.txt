 En programmation informatique, la réflexion est la capacité d'un programme à examiner, et éventuellement à modifier, ses structures internes de haut niveau (par exemple ses objets) lors de son exécution.Introspection et intercessionOn distingue deux techniques utilisées par les systèmes dotés de réflexion&nbsp;:l'introspection, qui est la capacité d'un programme à examiner son propre état.l'intercession, qui est la capacité d'un programme à modifier son propre état d'exécution ou d'altérer sa propre interprétation ou signification.L'introspection est utilisée pour effectuer des mesures de performance, inspecter des modules ou déboguer un programme. Elle est implémentée dans des langages comme Smalltalk ou Java qui fournissent des outils pour connaître la classe d'un objet, ses attributs, ses méthodes, etc. L'introspection n'existe pas dans des langages comme C ou Pascal.L'intercession permet à un programme d'évoluer automatiquement en fonction des besoins et de l'environnement. Cette propriété apparaît dans des langages comme SmallTalk ou Python, mais elle n'existe pas dans des langages comme C.Réflexion structurelle et réflexion comportementaleParallèlement aux concepts d'introspection et d'intercession, il existe deux types de réflexion&nbsp;: la réflexion structurelle et la réflexion comportementale.La réflexion structurelle consiste à réifier le code d'un programme et tous les types abstraits accessibles par ce programme. Dans le premier cas, la réification du code d'un programme permet de manipuler ce programme pendant l'exécution. Il est possible ainsi de maintenir un programme même lorsque celui-ci effectue des tâches. Dans le deuxième cas, la réification des types abstraits permet au programme d'examiner et de modifier la structure de types complexes. On peut ainsi, par exemple, mettre au point des algorithmes génériques de sérialisation.La réflexion comportementale (ou réflexion de comportement) concerne plus particulièrement l'exécution du programme et l'environnement du programme. Par ce type de réflexion, un programme a moyen de savoir comment il est interprété et a la possibilité de modifier sa façon d'être exécuté, en intervenant sur les structures de données de l'évaluateur du programme et sur l'évaluateur lui-même. Ainsi, le programme peut obtenir des informations sur son implémentation ou même s'auto-réorganiser afin de s'adapter au mieux à un «&nbsp;environnement&nbsp;».Réflexion et programmation objetEn programmation orientée objet, l'architecture réflexive est implémentée par le concept des métaobjets. Ceux-ci représentent des éléments des programmes orientés objets comme les classes, les messages et les fonctions génériques. La manipulation de ces métaobjets se fait par un protocole à méta-objets qui permet de décider des comportements du langage. CLOS est le premier langage à avoir implémenté un protocole à méta-objets.Langage réflexifLes langages suivants supportent la réflexion&nbsp;:SmallTalkCLOSPythonRubyIoJavaObjective-CPHP, depuis la version 5les langages qui fonctionnent avec l'architecture .NET (comme le C#)langages assembleursDans les langages où il n'y a pas de distinction entre la compilation et l'exécution (Lisp par exemple), il n'y a pas de différence entre l'interprétation du code et la réflexion.== Exemple ==L'exemple suivant est écrit en Java :// Sans utiliser la réflexion
Foo foo = new Foo ();
foo.hello ();// En utilisant la réflexion
Class cl = Class.forName (&quot;Foo&quot;);
Method method = cl.getMethod (&quot;hello&quot;, null);
method.invoke (cl.newInstance (), null);Les deux morceaux de code créent une instance de la classe Foo et appellent leur méthode hello.Dans le premier programme, le nom des classes et des méthodes est codé en dur, il n'est pas possible d'utiliser le nom d'une autre classe. Dans le second programme, en revanche, le nom des classes et des méthodes peut varier à l'exécution.BibliographieD. G. Bobrow, R. G. Gabriel, and J. L. White. Object oriented programming: the CLOS perpective. MIT Press, 1993.G. Kickzales, J. des Rivières, and D. G. Bobrow. The art of the metaobject protocol. MIT Press, 1991.Voir aussiQuineIntercessionIntrospectionRéificationMétaobjetProtocole à méta-objetsCatégorie:Programmation informatiqueca:Reflexió (informàtica) de:Reflexion (Programmierung) en:Reflection (computer science) es:Reflexión (informática) it:Riflessione (informatica) ja:リフレクション (情報工学) ko:반영 (컴퓨터) lt:Refleksija (programavimas) nl:Reflectie (informatica) pl:Mechanizm refleksji pt:Reflexão (programação) ru:Отражение (программирование) vi:Reflection (khoa học máy tính) zh:反射 (计算机科学)