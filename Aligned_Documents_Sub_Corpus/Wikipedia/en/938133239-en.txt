 The D programming language, also known simply as D, is an object-oriented, imperative, multiparadigm system programming language by Walter Bright of Digital Mars. It originated as a re-engineering of C++, but even though it is predominantly influenced by that language, it is not a variant of C++. D has redesigned some C++ features and has been influenced by concepts used in other programming languages, such as Java, C# and Eiffel. A stable version, 1.0, was released on January 2, 2007. An experimental version, 2.0, was released on June 17 2007.FeaturesD is being designed with lessons learned from practical C++ usage rather than from a theoretical perspective. Even though it uses many C/C++ concepts it also discards some, and as such is not strictly backward compatible with C/C++ source code. It adds to the functionality of C++ by also implementing design by contract, unit testing, true modules, garbage collection, first class arrays, associative arrays, dynamic arrays, array slicing, nested functions, inner classes, closureshttp://www.digitalmars.com/d/changelog.html#new2_007&lt;/ref&gt;, anonymous functions, compile time function execution, lazy evaluation and has a reengineered template syntax. D retains C++'s ability to do low-level coding, and adds to it with support for an integrated inline assembler. C++ multiple inheritance is replaced by Java style single inheritance with interfaces and mixins. D's declaration, statement and expression syntax closely matches that of C++.The inline assembler typifies the differences between D and application languages like Java and C#. An inline assembler lets programmers enter machine-specific assembly code in with standard D code&mdash;a technique often used by system programmers to access the low-level features of the processor needed to run programs that interface directly with the underlying hardware, such as operating systems and device drivers.D has built-in support for documentation comments, but so far only the compiler supplied by Digital Mars implements a documentation generator.Programming paradigmsD supports three main programming paradigms—imperative, object-oriented, and metaprogramming.ImperativeImperative programming in D is almost identical to C. Functions, data, statements, declarations and expressions work just as in C, and the C runtime library can be accessed directly. Some notable differences between D and C in the area of imperative programming include D's foreach loop construct, which allows looping over a collection, and nested functions, which are functions that are declared inside of another and may access the enclosing function's local variables.Object OrientedObject oriented programming in D is based on a single inheritance hierarchy, with all classes derived from class Object. D does not support multiple inheritance; instead, it uses Java-style interfaces, which are comparable to C++ pure abstract classes.MetaprogrammingMetaprogramming is supported by a combination of templates, compile time function execution, tuples, and string mixins. The following examples demonstrate some of D's compile-time features.Templates in D can be written in a more function-like style than those in C++. Here the use of static if, D's compile-time conditional construct, is demonstrated to construct a factorial template. template Factorial(ulong n)  This is a regular function that performs the same calculation. The template version's code is similar to that of this function. ulong factorial(ulong n)  In the following two examples, the template and function defined above are used to compute factorials. The types of constants need not be specified explicitly as the compiler infers their types from the right-hand sides of assignments. const fact_7 = Factorial!(7); This is an example of compile-time function execution. Ordinary functions may be used in constant, compile-time expressions provided they meet certain criteria. const fact_9 = factorial(9); The std.metastrings.Format template performs printf-like data formatting, and the "msg" pragma displays the result at compile time. import std.metastrings; pragma(msg, Format!("7! = %s", fact_7)); pragma(msg, Format!("9! = %s", fact_9)); Memory managementMemory is usually managed with garbage collection, but specific objects can be finalized immediately when they go out of scope. Explicit memory management is possible using the overloaded operators new and delete, and by simply calling C's malloc and free directly. Garbage collection can be controlled: programmers can add and exclude memory ranges from being observed by the collector, can pause and resume the collector and force a generational or a full collection cyclehttp://www.digitalmars.com/d/2.0/phobos/std_gc.html&lt;/ref&gt;. The manual gives many examples of how to implement different highly optimized memory management schemes for when garbage collection is inadequate in a program.Interaction with other systemsC's application binary interface (ABI) is supported as well as all of C's fundamental and derived types, enabling direct access to existing C code and libraries. C's standard library is part of standard D. Unless you use very explicit namespaces it can be somewhat messy to access, as it is spread throughout the D modules that use it -- but the pure D standard library is usually sufficient unless interfacing with C code.C++'s ABI is not fully supported, although D can access C++ code that is written to the C ABI, and can access C++ COM (Component Object Model) code. The D parser understands an extern (C++) calling convention for linking to C++ objects, but it is only implemented in the currently experimental D 2.0.D 2.0D 2.0, a branch version of D that includes experimental features, was released on June 17, 2007. Some of these features are:Support for enforcing const-correctness:D differentiates between mutable references to immutable data, const references to mutable data, and combinations thereofconst and invariant keywords are transitiveLimited support for linking with code written in C++Iteration with foreach over defined range onlySupport for "real" closures. Previously closures couldn't be safely returned from functions, because stack-allocated variables would become inaccessibleFuture support for "pure" functions which can only access immutable data and call other pure functions. This ensures a pure function has no side effects (the same stack inputs always result in the same outputs and outputs exist only through return values). Together with real closure support this allows Functional Programming in D and also opens theoretical paths for safe automatic threading.Changes to standard Phobos libraryList of featuresImplementationCurrent D implementations compile directly into machine code for efficient execution.Even though D is still under development, changes to the language are no longer made regularly since version 1.0 of January 2, 2007. The design is currently virtually frozen, and newer releases focus on resolving existing bugs. Version 1.0 is not completely compatible with older versions of the language and compiler. The official compiler by Walter Bright defines the language itself.DMD: the Digital Mars D compiler, the official D compiler by Walter Bright. The compiler front end is licensed under both the Artistic License and the GNU GPL; sources for the front end are distributed along with the compiler binaries. The compiler back end is proprietary.GDC: A front end for the GCC back end, built using the open DMD compiler sources. Development snapshots also support D version 2.0.LLVMDC: A new compiler, also based on open DMD sources that uses LLVM as its compiler back end. It's in early development.Development toolsD is still lacking support in many IDEs, which is a potential stumbling block for some users. Editors used include Entice Designer, emacs, vim, SciTE, Smultron and Zeus among others. Vim supports both syntax highlighting and code completion (through patched ctags). A bundle is available for TextMate, and the Code::Blocks IDE includes partial support for the language. However, standard IDE features such as code completion or refactoring are not yet available, though they do work partially in Code::Blocks (due to D's similarity to C).There are at least two actively developed Eclipse plug-ins for D, Descent and Mmrnmhrm.Additionally, there are open source D IDEs written in the D language itself such as Poseidon, which does feature code completion, syntax highlighting, and integrated debugging.D applications can be debugged using any C/C++ debugger, like GDB or WinDbg, although support for various fundamental language features is extremely limited. A debugger with explicit support for D is Ddbg for Windows. The commercial ZeroBUGS debugger for Linux has experimental support for the D language. Ddbg can be used with various IDEs or from the command line; ZeroBUGS has its own GUI.Problems and controversiesOperator overloadingD operator overloads are sometimes less powerful than the C++ counterparts. An example is the opIndex, which suffers because D does not allow returning references. This makes operations like obji++; impossible. D's partial solution is the opIndexAssign operator, which only fixes cases where the indexed expression is only an L-value like obji = 5 but not the original cases. In addition, the C++ way of returning a reference allows for the usage of the returned type's overloaded assignment operator. This is currently not possible in D. D 2.0 may fix this by introducing an opIndexLvalue - like operator overload, and deprecating opIndexAssign.Division concerning the standard libraryThe standard library in D is called Phobos. Some members of the D community think Phobos is too simplistic and that it has numerous quirks and other issues, and a replacement of the library called Tango was written.Wiki4D: Standard Lib However, Tango and Phobos are at the moment incompatible due to different run-time libraries (the garbage collector, threading support, etc). The existence of two libraries, both widely in use, could lead to significant problems where some packages use Phobos and others use Tango.Unfinished support for shared/dynamic librariesUnix's ELF shared libraries are supported to an extent using the GDC compiler. On Windows systems, DLLs are supported and allow D's garbage collector-allocated objects to be safely passed to C functions, since the garbage collector scans the stack for pointers. However, there are still limitations with DLLs in D including the fact that run-time type information of classes defined in the DLL is incompatible with those defined in the executable, and that any object created from within the DLL must be finalized before the DLL is unloaded.http://www.prowiki.org/wiki4d/wiki.cgi?BestPractices/DLL&lt;/ref&gt;OtherD has no built-in support for weak references, although there are some libraries that implement them. Operations on Unicode strings are unintuitive (compiler accepts Unicode source code, standard library and foreach constructs operate on UTF-8, but string slicing and length property operate on bytes rather than characters).ExamplesExample 1This example program prints its command line arguments. The main function is the entry point of a D program, and args is an array of strings representing the command line arguments. A string in D is an array of characters, represented by char[] in D 1.0, or invariant(char)[] in D 2.0 alpha. Newer versions of the language define string as an alias for char[] or invariant(char) [], however, an explicit alias definition is necessary for compatibility with older versions. import std.stdio: writefln;void main(string[] args)  The foreach statement can iterate over any collection, in this case it is producing a sequence of indexes (i) and values (a) from the array args. The index i and the value a have their types inferred from the type of the array args.Example 2The following shows several capabilities of D in a very short program. It iterates the lines of a text file named 'words.txt' that contains a different word on each line, and prints all the words that are anagrams of other words. import std.stdio; import std.stream; import std.string;void main()  The type of 'signature2words' is a built-in associative array that maps string keys to arrays of strings. It equals about to defaultdict(list) in Python.BufferedFile yields lines lazily, without their newline, for performance the 'line' it yields is just a view on a string, so it has to be copied with 'dup' to have an actual string copy that can be used later.The '~=' appends a new string to the values of the associate array.'tolower' and 'join' are string functions that D allows to use with a method syntax, their names are often similar to Python string methods. The 'tolower' converts an ASCII string to lowercase and join(" ") joins an array of strings into a single string using a single space as separator.The 'sort' sorts the array in place, creating an unique signature for words that are anagrams of each other.The second foreach iterates on the values of the associative array, it's able to infer the type of 'words'.See alsoComparison of programming languagesDdocReferencesExternal links Digital Mars: D programming languageDSource, an open source community for the D Programming Language.Dprogramming.com, home of the DFL windowing library.Wiki4D, &quot;the wiki for the d programming language&quot;gdc, D front-end for GCCThe Computer Language Benchmarks GameD Documentation WikiD Language Feature TableVideo presentation of D by Walter BrightDdbg - Win32 D debuggerDWin - library for D Programming LanguageDLogo - logos, buttons, banners for D Programming LanguageSciTE4D - Text Editor for D Programming LanguageD Programming Language China Chinese support forum for D Programming LanguageComputerworld Interview with Walter Bright on D Programming LanguageD D D D Dbg:D (език за програмиране) ca:Llenguatge D cs:D (programovací jazyk) de:D (Programmiersprache) es:Lenguaje de programación D eo:D (programlingvo) fr:D (langage) gl:Linguaxe de programación D ko:D (프로그래밍 언어) id:D (bahasa pemrograman) it:D (linguaggio di programmazione) hu:D programozási nyelv ms:Bahasa pengaturcaraan D nl:D (programmeertaal) ja:D言語 pl:D (język programowania) pt:D (linguagem de programação) ru:D (язык программирования) sk:D (programovací jazyk) fi:D (ohjelmointikieli) sv:D (programspråk) tr:D programlama dili zh:D語言