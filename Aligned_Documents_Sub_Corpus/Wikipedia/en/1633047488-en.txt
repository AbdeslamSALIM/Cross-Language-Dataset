In numerical analysis, the Runge–Kutta methods (pronounced ) are an important family of implicit and explicit iterative methods for the approximation of solutions of ordinary differential equations. These techniques were developed around 1900 by the German mathematicians C. Runge and M.W. Kutta.See the article on numerical ordinary differential equations for more background and other methods. See also List of Runge-Kutta methods.The classical fourth-order Runge–Kutta methodOne member of the family of Runge–Kutta methods is so commonly used that it is often referred to as "RK4" or simply as "the Runge–Kutta method".Let an initial value problem be specified as follows. y' = f(t, y), \quad y(t_0) = y_0. Then, the RK4 method for this problem is given by the following equations:\beginy_ &= y_n +  \left(k_1 + 2k_2 + 2k_3 + k_4 \right) \\ t_ &= t_n + h \\ \endwhere  y_ is the RK4 approximation of  y(t_) , and\begink_1 &= f \left( t_n, y_n \right) \\ k_2 &= f \left( t_n + , y_n +  k_1\right) \\ k_3 &= f \left( t_n + , y_n +  k_2\right) \\ k_4 &= f \left( t_n + h, y_n + h k_3 \right) \\ \endThus, the next value (y''''n+1) is determined by the present value (y''''n) plus the product of the size of the interval (h) and an estimated slope. The slope is a weighted average of slopes:k1 is the slope at the beginning of the interval;k''2 is the slope at the midpoint of the interval, using slope ''k1 to determine the value of y'' at the point ''tn'' + ''h/2 using Euler's method;k''3 is again the slope at the midpoint, but now using the slope ''k2 to determine the y-value;k''4 is the slope at the end of the interval, with its ''y-value determined using k3.In averaging the four slopes, greater weight is given to the slopes at the midpoint:\mbox = \frac.The RK4 method is a fourth-order method, meaning that the error per step is on the order of h''5, while the total accumulated error has order ''h4.Note that the above formulas are valid for both scalar- and vector-valued functions (i.e., y can be a vector and  f  an operator). For example one can integrate Schrödinger's equation using the Hamiltonian operator as function  f .Explicit Runge–Kutta methodsThe family of explicit Runge–Kutta methods is a generalization of the RK4 method mentioned above. It is given by y_ = y_n + h\sum_^s b_i k_i, where k_1 = f(t_n, y_n), \,  k_2 = f(t_n+c_2h, y_n+a_hk_1), \,  k_3 = f(t_n+c_3h, y_n+a_hk_1+a_hk_2), \,  \vdots  k_s = f(t_n+c_sh, y_n+a_hk_1+a_hk_2+\cdots+a_hk_). (Note: the above equations have different but equivalent definitions in different texts).To specify a particular method, one needs to provide the integer s'' (the number of stages), and the coefficients ''aij (for 1 &le; j'' i'' (for ''i = 1, 2, ..., s'') and ''ci'' (for ''i = 2, 3, ..., s''). These data are usually arranged in a mnemonic device, known as a ''Butcher tableau (after John C. Butcher):0 c_2  a_  c_3  a_  a_  \vdots  \vdots  \ddots  c_s  a_  a_  \cdots  a_  b_1  b_2  \cdots  b_  b_s The Runge–Kutta method is consistent if\sum_^ a_ = c_i\ \mathrm\ i=2, \ldots, s.There are also accompanying requirements if we require the method to have a certain order p'', meaning that the truncation error is O(''hp''+1). These can be derived from the definition of the truncation error itself. For example, a 2-stage method has order 2 if ''b1 + b''2 = 1, ''b2c''2 = 1/2, and ''b2a21 = 1/2.ExamplesThe RK4 method falls in this framework. Its tableau is:01/21/21/201/210011/61/31/31/6However, the simplest Runge–Kutta method is the (forward) Euler method, given by the formula  y_ = y_n + hf(t_n,y_n) . This is the only consistent explicit Runge–Kutta method with one stage. The corresponding tableau is:01An example of a second-order method with two stages is provided by the midpoint method y_ = y_n + hf\left(t_n+\frac,y_n+\fracf(t_n, y_n)\right). The corresponding tableau is:01/21/201\begin  c_1 &amp; | &amp; a_ &amp; a_ &amp; a_ &amp; \cdots &amp; a_ \\
  c_2 &amp; | &amp; a_ &amp; a_ &amp; a_ &amp; \cdots &amp; a_ \\\vdots & | & \vdots & \vdots & \vdots & \ddots & \vdots \\  c_n &amp; | &amp; a_ &amp; a_ &amp; a_ &amp; \cdots &amp; a_ \\
      &amp;   &amp; ---    &amp; ---    &amp; ---    &amp; ---    &amp; --- \\
      &amp;   &amp; b_1    &amp; b_2    &amp; b_3    &amp; b_4    &amp; b_5\endNote that this 'midpoint' method is not the optimal RK2 method. An alternative is provided by Heun's method, where the 1/2's in the tableau above are replaced by 1's and the b's row is 1/2. If one wants to minimize the truncation error, the method below should be used (Atkinson p. 423). Other important methods are Fehlberg, Cash-Karp and Dormand-Prince. Also, read the article on Adaptive Stepsize.UsageThe following is an example usage of a two-stage explicit Runge–Kutta method:02/32/31/43/4to solve the initial-value problem y' = (\tan)+1,\quad y(1)=1,\ t\in 1.1with step size h=0.025.The tableau above yields the equivalent corresponding equations below defining the method: k_1 = y_n \, k_2 = y_n + 2/3hf(t_n, k_1) \, y_ = y_n + h(1/4f(t_n,k_1)+3/4f(t_n+2/3h,k_2))\,t_0=1y_0=1t_1=1.025k_1 = y_0 = 1f(t_0,k_1)=2.557407725k_2 = y_0 + 2/3hf(t_0,k_1) = 1.042623462y_1=y_0+h(1/4*f(t_0, k_1) + 3/4*f(t_0+2/3h,k_2))=1.066869388t_2=1.05k_1 = y_1 = 1.066869388f(t_1,k_1)=2.813524695k_2 = y_1 + 2/3hf(t_1,k_1) = 1.113761467y_2=y_1+h(1/4*f(t_1, k_1) + 3/4*f(t_1+2/3h,k_2))=1.141332181t_3=1.075k_1 = y_2 = 1.141332181f(t_2,k_1)=3.183536647k_2 = y_2 + 2/3hf(t_2,k_1) = 1.194391125y_3=y_2+h(1/4*f(t_2, k_1) + 3/4*f(t_2+2/3h,k_2))=1.227417567t_4=1.1k_1 = y_3 = 1.227417567 f(t_3,k_1)=3.796866512k_2 = y_3 + 2/3hf(t_3,k_1) = 1.290698676y_4=y_3+h(1/4*f(t_3, k_1) + 3/4*f(t_3+2/3h,k_2))=1.335079087The numerical solutions correspond to the underlined values. Note that f(t_i,k_1) has been calculated to avoid recalculation in the y_is.Adaptive Runge-Kutta methodsThe adaptive methods are designed to produce an estimate of the local truncation error of a single Runge-Kutta step. This is done by having two methods in the tableau, one with order p and one with order p - 1.The lower-order step is given by y^*_ = y_n + h\sum_^s b^*_i k_i, where the k_i are the same as for the higher order method. Then the error is e_ = y_ - y^*_ = h\sum_^s (b_i - b^*_i) k_i, which is O(h^p). The Butcher Tableau for this kind of method is extended to give the values of b^*_i:0 c_2  a_  c_3  a_  a_  \vdots  \vdots  \ddots  c_s  a_  a_  \cdots  a_  b_1  b_2  \cdots  b_  b_s  b^*_1  b^*_2  \cdots  b^*_  b^*_s The Runge–Kutta–Fehlberg method has two methods of orders 5 and 4. Its extended Butcher Tableau is:01/41/43/83/329/3212/131932/2197−7200/21977296/21971439/216−83680/513-845/41041/2−8/272−3544/25651859/4104−11/4016/13506656/1282528561/56430−9/502/5525/21601408/25652197/4104−1/50However, the simplest adaptive Runge-Kutta method involves combining the Heun method, which is order 2, with the Euler method, which is order 1. Its extended Butcher Tableau is:0111/21/210The error estimate is used to control the stepsize.Other adaptive Runge–Kutta methods are the Bogacki–Shampine method (orders 3 and 2), the Cash–Karp method and the Dormand–Prince method (both with orders 5 and 4).Implicit Runge-Kutta methodsThe implicit methods are more general than the explicit ones. The distinction shows up in the Butcher Tableau: for an implicit method, the coefficient matrix a_ is not necessarily lower triangular:\begin c_1 & a_ & a_& \dots & a_\\ c_2 & a_ & a_& \dots & a_\\ \vdots & \vdots & \vdots& \ddots& \vdots\\ c_s & a_ & a_& \dots & a_ \\ \hline      &amp; b_1    &amp; b_2   &amp; \dots &amp; b_s\\\end =\begin \mathbf& A\\ \hline         &amp; \mathbf \\\end The approximate solution to the initial value problem reflects the greater number of coefficients:y_ = y_n + h \sum_^s b_i k_i\,k_i = f\left(t_n + c_i h, y_n + h \sum_^s a_ k_j\right).Due to the fullness of the matrix a_, the evaluation of each k_i is now considerably involved and dependent on the specific function f(t, y). Despite the difficulties, implicit methods are of great importance due to their high (possibly unconditional) stability, which is especially important in the solution of partial differential equations. The simplest example of an implicit Runge-Kutta method is the backward Euler method:y_ = y_n + h f(t_n + h, y_)\,The Butcher Tableau for this is simply:\begin 1 & 1 \\ \hline &amp; 1 \\\end It can be difficult to make sense of even this simple implicit method, as seen from the expression for k_1:k_1 = f(t_n + c_1 h, y_n + h a_ k_1) \rightarrow k_1 = f(t_n + h, y_n + h k_1).In this case, the awkward expression above can be simplified by noting thaty_ = y_n + h k_1 \rightarrow h k_1 = y_ - y_n\,so thatk_1 = f(t_n + h, y_n + y_ - y_n) = f(t_n + h, y_).\,from whichy_ = y_n + h f(t_n + h, y_)\,follows. Though simpler then the "raw" representation before manipulation, this is an implicit relation so that the actual solution is problem dependent. Multistep implicit methods have been used with success by some researchers. The combination of stability, higher order accuracy with fewer steps, and stepping that depends only on the previous value makes them attractive; however the complicated problem-specific implementation and the fact that k_i must often be approximated iteratively means that they are not common.ReferencesJ. C. Butcher, Numerical methods for ordinary differential equations, ISBN 0471967580George E. Forsythe, Michael A. Malcolm, and Cleve B. Moler. Computer Methods for Mathematical Computations. Englewood Cliffs, NJ: Prentice-Hall, 1977. (See Chapter 6.)Ernst Hairer, Syvert Paul Nørsett, and Gerhard Wanner. Solving ordinary differential equations I: Nonstiff problems, second edition. Berlin: Springer Verlag, 1993. ISBN 3-540-56670-8.William H. Press, Brian P. Flannery, Saul A. Teukolsky, William T. Vetterling. Numerical Recipes in C. Cambridge, UK: Cambridge University Press, 1988. (See Sections 16.1 and 16.2.)Runge-Kutta 4th-order method textbook notes, PPT, Matlab Mathematica Maple Mathcad at Holistic Numerical Methods InstituteKendall E. Atkinson. An Introduction to Numerical Analysis. John Wiley & Sons - 1989F. Cellier, E. Kofman. Continuous System Simulation. Springer Verlag, 2006. ISBN 0-387-26102-8.External linksRunge-KuttaRunge-Kutta 4th Order MethodRunge Kutta Method for O.D.E.'s Category:Numerical differential equations Category:Runge–Kutta methodsde:Runge-Kutta-Verfahren es:Método de Runge-Kutta fa:روش‌های رونگه‐کوتا fr:Méthodes de Runge-Kutta it:Metodi di Runge-Kutta nl:Runge-Kuttamethode ja:ルンゲ＝クッタ法 pl:Algorytm Rungego-Kutty pt:Método de Runge-Kutta ru:Метод Рунге — Кутты sr:Метода Рунге-Кута sv:Runge-Kuttametoden tr:Runge-Kutta Yöntemleri uk:Метод Рунге-Кутта zh:龙格－库塔法