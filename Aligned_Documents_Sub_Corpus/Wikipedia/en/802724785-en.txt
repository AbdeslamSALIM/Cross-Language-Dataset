  In computing, Lua ( LOO-ah) is a lightweight, reflective, imperative and procedural programming language, designed as a scripting language with extensible semantics as a primary goal. The name means ‘moon’ in Portuguese. It has enjoyed great popularity in the videogames industry and is known for having a simple yet powerful C API.HistoryLua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes, members of the Computer Graphics Technology Group at PUC-Rio, the Pontifical University of Rio de Janeiro, in Brazil. Versions of Lua prior to version 5.0 were released under a license similar to the BSD license. From version 5.0 onwards, Lua has been licensed under the MIT License.Some of its closest relatives include Icon for its design and Python for its ease of use by non-programmers. In an article published in Dr. Dobb's Journal, Lua’s creators also state that Lisp and Scheme with their single, ubiquitous data structure mechanism (the list) were a major influence on their decision to develop the table as the primary data structure of Lua.http://www.lua.org/ddj.htmlLua has been used in many applications, both commercial and non-commercial. See the Applications section for a detailed list.FeaturesLua is commonly described as a “multi-paradigm” language, providing a small set of general features that can be extended to fit different problem types, rather than providing a more complex and rigid specification to match a single paradigm. Lua, for instance, does not contain explicit support for inheritance, but allows it to be implemented relatively easily with metatables. Similarly, Lua allows programmers to implement namespaces, classes, and other related features using its single table implementation; first-class functions allow the employment of many powerful techniques from functional programming; and full lexical scoping allows fine-grained information hiding to enforce the principle of least privilege.In general, Lua strives to provide flexible meta-features that can be extended as needed, rather than supply a feature-set specific to one programming paradigm. As a result, the base language is light —in fact, the full reference interpreter is only about 150kB compiled— and easily adaptable to a broad range of applications.Lua is a dynamically typed language intended for use as an extension or scripting language, and is compact enough to fit on a variety of host platforms. It supports only a small number of atomic data structures such as boolean values, numbers (double-precision floating point by default), and strings. Typical data structures such as arrays, sets, hash tables, lists, and records can be represented using Lua’s single native data structure, the table, which is essentially a heterogeneous map.Lua has no built-in support for namespaces and object-oriented programming. Instead, metatable and metamethods are used to extend the language to support both programming paradigms in an elegant and straight-forward manner.Lua implements a small set of advanced features such as first-class functions, garbage collection, closures, proper tail calls, coercion (automatic conversion between string and number values at run time), coroutines (cooperative multitasking) and dynamic module loading.By including only a minimum set of data types, Lua attempts to strike a balance between power and size.Example codeThe classic hello world program can be written as follows: print(&quot;Hello World!&quot;) The factorial is an example of a recursive function:  function factorial(n) if n == 0 then
   return 1                            -- A comment in Lua starts with a double-hyphen
 else
   return n * factorial(n - 1)        -- and runs to the end of the line
 endendfunction factorial2(n) -- Shorter equivalent of the above return n==0 and 1 or n*factorial2(n - 1)endprint([[multiple    lines]])                           --[[ Multi-line strings &amp; comments are
                                            adorned with double square brackets ]] The second form of factorial function originates from Lua's short-circuit evaluation of boolean operators.Lua’s treatment of functions as first-class variables is shown in the following example, where the print function’s behavior is modified:  do local oldprint = print           -- Store current print function as oldprint
 print = function(s)              -- Redefine print function
   if s == &quot;foo&quot; then
     oldprint(&quot;bar&quot;)
   else 
     oldprint(s) 
   end
 endend  Any future calls to ‘print’ will now be routed through the new function, and thanks to Lua’s lexical scoping, the old print function will only be accessible by the new, modified print.Lua also supports closures, as demonstrated below:  function makeaddfunc(x) -- Return a new function that adds x to the argument
 return function(y)
   -- When we refer to the variable x, which is outside of the current
   -- scope and whose lifetime is shorter than that of this anonymous
   -- function, Lua creates a closure.
   return x + y
 endend plustwo = makeaddfunc(2) print(plustwo(5)) -- Prints 7  A new closure for the variable x is created every time makeaddfunc is called, so that the anonymous function returned will always access its own x parameter. The closure is managed by Lua’s garbage collector, just like any other object.Extensible semantics is a key feature of Lua, and the “metatable” concept allows Lua’s tables to be customized in powerful and unique ways. The following example demonstrates an “infinite” table. For any n, fibsn will give the nth Fibonacci number using dynamic programming and memoization.  fibs =  -- Initial values for fibs1 and fibs2. setmetatable(fibs, ) TablesTables are the most important data structure (and, by design, the only complex data structure) in Lua, and are the foundation of all user-created types.The table is a collection of key and data pairs (known also as hashed heterogeneous associative array), where the data is referenced by key. The key (index) can be of any data type except nil. An integer key of 1 is considered distinct from a string key of "1".Tables are created using the  constructor syntax:  a_table =  -- Creates a new, empty table  Tables are always passed by reference: Creates a new table, with one associated entry. The string x mapping tothe number 10.a_table = Prints the value associated with the string key,in this case 10.print(a_table&quot;x&quot;) b_table = a_table a_table&quot;x&quot; = 20 -- The value in the table has been changed to 20. print(a_table&quot;x&quot;) -- Prints 20.Prints 20, because a_table and b_table both refer to the same table.print(b_table&quot;x&quot;) Table as structureTables are often used as structures (or objects) by using strings as keys. Because such use is very common, Lua features a special syntax for accessing such fields. Example:  point =  -- Create new table print(point&quot;x&quot;) -- Prints 10 print(point.x) -- Has exactly the same meaning as line above Table as namespaceBy using a table to store related functions, it can act as a namespace.  Point =  Point.new = function (x, y) return endPoint.set_x = function (point, x) point.x = xend Table as arrayBy using a numerical key, the table resembles an array data type. Lua arrays are 1-based: the first index is 1 rather than 0 as it is for many programming languages (though an explicit index of 0 is allowed).A simple array of strings:  array =  -- Indices are assigned automatically. print(array2) -- Prints "b". Automatic indexing in Lua starts at 1. print(#array) -- Prints 4. # is the length operator for tables and strings. array0 = "z" -- Zero is a legal index. print(#array) -- Still prints 4, as Lua arrays are 1-based.  An array of objects:  function Point(x, y) -- "Point" object constructor return    -- Creates and returns a new object (table)end array =  -- Creates array of points print(array2.y) -- Prints 40 Object-oriented programmingAlthough Lua does not have a built-in concept of classes, they can be implemented using two language features: first-class functions and tables. By placing functions and related data into a table, an object is formed. Inheritance (both single and multiple) can be implemented via the “metatable” mechanism, telling the object to lookup nonexistent methods and fields in parent object(s).There is no such concept as “class” with these techniques, rather “prototypes” are used as in Self programming language or Javascript. New objects are created either with a factory method (that constructs new objects from scratch) or by cloning an existing object.Lua provides some syntactic sugar to facilitate object orientation. To declare member functions inside a prototype table, you can use function table:func(args), which is equivalent to function table.func(self, args). Calling class methods also makes use of the colon: object:func(args) is equivalent to object.func(object, args).Creating a basic vector object:  Vector =  -- Create a table to hold the class methods function Vector:new(x, y, z) -- The constructor local object = 
 setmetatable(object, )
 return objectendDeclare another member function, to determine themagnitude of the vectorfunction Vector:mag() -- Reference the implicit object using self
 return math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z)end vec = Vector:new(0, 1, 0) -- Create a vector print(vec:mag()) -- Call a member function using ":" print(vec.x) -- Access a member variable using "." InternalsLua programs are not interpreted directly from the textual Lua file, but are compiled into bytecode which is then run on the Lua virtual machine. The compilation process is typically transparent to the user and is performed during run-time, but it can be done offline in order to increase loading performance or reduce the memory footprint of the host environment by leaving out the compiler.This example is the bytecode listing of the factorial function described above (in Lua 5.1.1):function &lt;factorial.lua:1,6&gt; (10 instructions, 40 bytes at 003D5818)
1 param, 3 slots, 0 upvalues, 1 local, 3 constants, 0 functions
        1       [2]     EQ              0 0 -1  ; - 0
        2       [2]     JMP             2       ; to 5
        3       [3]     LOADK           1 -2    ; 1
        4       [3]     RETURN          1 2
        5       [5]     GETGLOBAL       1 -3    ; factorial
        6       [5]     SUB             2 0 -2  ; - 1
        7       [5]     CALL            1 2 2
        8       [5]     MUL             1 0 1
        9       [5]     RETURN          1 2
        10      [6]     RETURN          0 1There is also a free, third-party just-in-time compiler for the latest version (5.1) of Lua, called LuaJIT. It’s very small (under 32kB of additional code) and can often improve the performance of a Lua program significantly. http://luajit.org/luajit_performance.htmlC APILua is intended to be embedded into other applications, and accordingly it provides a robust, easy to use C API. The API is divided into two parts: the Lua core http://www.lua.org/manual/5.1/manual.html#3, and the Lua auxiliary library http://www.lua.org/manual/5.1/manual.html#4.The Lua API is fairly straightforward because its unique design eliminates the need for manual reference management in C code, unlike Python’s API. The API, like the language, is minimalistic. Advanced functionality is provided by the auxiliary library, which consists largely of preprocessor macros which make complex table operations more palatable.StackThe Lua API makes extensive use of a global stack which is used to pass parameters to and from Lua and C functions. Lua provides functions to push and pop most simple C data types (integers, floats, etc.) to and from the stack, as well as functions for manipulating tables through the stack. The Lua stack is somewhat different from a traditional stack; the stack can be indexed directly, for example. Negative indices indicate offsets from the top of the stack (for example, &minus;1 is the last element), while positive indices indicate offsets from the bottom.Marshalling data between C and Lua functions is also done using the stack. To call a Lua function, arguments are pushed onto the stack, and then the lua_call is used to call the actual function. When writing a C function to be directly called from Lua, the arguments are popped from the stack.Special tablesThe C API also provides several special tables, located at various “pseudo-indices” in the Lua stack. At LUA_GLOBALSINDEX is the globals table, _G from within Lua, which is the main namespace. There is also a registry located at LUA_REGISTRYINDEX where C programs can store Lua values for later retrieval.Extension modulesIt is possible to write extension modules using the Lua API. Extension modules are shared objects which can be used to extend the functionality of the interpreter by providing native facilities to Lua scripts. Lua scripts may load extension modules using require http://www.lua.org/manual/5.1/manual.html#pdf-require. A growing collection of modules known as rocks are available through a package management system called LuaRocks, in the spirit of RubyGems.Bindings to other languagesLuaInterface http://luaforge.net/projects/luainterface/ for CLR based languages.Tao.Lua http://www.taoframework.com/project/lua for .Net and MonoLuaJava http://luaforge.net/projects/luajava for Java.RubyLuaBridge http://rubyluabridge.rubyforge.org for Ruby.Kahlua http://code.google.com/p/kahlua/ for J2ME (CLDC 1.1). This is not a binding, but a reimplementation of the Lua virtual machine.Lunatic Python http://labix.org/lunatic-python binds Python and LuaApplicationsLua, as a compiled binary, is small. Coupled with it being relatively fast and having the liberal MIT license, it has gained a following among game developers for providing a viable scripting interface.GamesIn videogame development, Lua is widely used as scripting language, see also game programmer. Here is a list of notable games using Lua:Aleph One (an open-source enhancement of Marathon 2: Durandal) supports Lua, and it’s been used in a number of scenarios (including Excalibur and Eternal).Company of Heroes, a WW2 RTS. Lua is used for the console, AI, single player scripting, win condition scripting and for storing unit attributes and configuration information.Crysis, a first-person shooter & spiritual successor to Far Cry. FarCry itself used Lua extensively.Garry's Mod and Fortress Forever, mods for Half-Life 2, use Lua scripting for tools and other sorts of things for full customization.Grim Fandango and Escape from Monkey Island, both based on the GrimE engine. The historic “SCUMM Bar” is renovated and renamed to the "Lua Bar" as a reference.Heroes of Might and Magic V, a turn-based strategy computer game.PlayStation Home is programmed using Lua.Psychonauts has more Lua aboard than C++ (400KLOC vs. 260KLOC).Ragnarok Online uses Lua to allow players to fully customize the artificial intelligence of their homunculus to their liking, provided that they have an Alchemist to summon one."Roblox" An Online game for kids Ages 7-14ROSE Online Uses Lua scripting for AI dialogs.S.T.A.L.K.E.R.: Shadow of Chernobyl, has all game scripts written in LuaStar Wars: Empire at War and Universe at War: Earth AssaultSupreme Commander and its expansion Forged Alliance make extensive use of Lua for in-game scripting, camera control, user interfaces and game modificationsThe Guild 2 Most of the game is programmed in Lua.Warhammer Online: Age of Reckoning A fantasy MMORPG based upon the popular Warhammer table-top game.World of Warcraft, a fantasy MMORPG. Lua is used to allow users to customize its user interface. It can also be used to create creature mobs/NPC's/Game Objects/etc...not either for private servers.The Witcher Uses Lua for game scriptsVendetta Online Uses Lua for game scripts and missions.Other applicationsCelestia uses Lua to expand its capabilities without recompiling its source codeMultimedia Fusion Developer 2 has a Lua extension that allows games and applications created with it to run Lua scripts.Adobe Photoshop Lightroom uses Lua for its user interfaceThe window manager Ion uses Lua for customization and extensibility.The packet sniffer Wireshark uses Lua for scripting and prototyping.Intellipool Network Monitor uses Lua for customization and extensibility.Lua Player is a port designed to run on Sony Computer Entertainment’s PlayStation Portable to allow entry-level programming.CMUcam uses Lua for customization and extensibility as part of the CMUcam 3 scripterlighttpd uses Lua for hook scripts. Also, Cache Meta Language, a sophisticated way to describe caching behavior.The popular network mapping program nmap uses Lua as the basis for its scripting language, called nse.The version control system Monotone uses Lua for scripting hooks.The Freeswitch open source PBX project embeds Lua in it's APIeyeon's Fusion compositor uses embedded Lua for internal and external scripts and also plugin prototyping.The Snort Intrusion Detection/Prevention System version 3.0 uses Lua for its command line interpreter.New versions of SciTE allow Lua to be used to provide additional features.Version 2.01 of the profile management software for Logitech’s G15 gaming keyboard uses Lua as its scripting language.Cisco uses Lua to implement Dynamic Access Policies within the Adaptive Security Appliance.Project Dogwaffle uses Lua to let the end-user create new imaging filters. DogLua is based on a 'gluas' plugin spec developed initially for the GIMP. Lua scripting is also available in other digital painting programs, such as ArtWeaver and Twistedbrush. Some implementations have their respective extensions. When the core GIMP-original gluas syntax is used without proprietary extensions, these imaging filters can be shared and used across these applications for the benefit of other users. Some extensions from Project Dogwaffle have found their way also into others such as ArtWeaver.3DMLW plugin uses Lua scripting for animating 3D and handling different events.FreePOPs is an extensible mail proxy. It enables checking and downloading of e-mail from webmails from any conventional POP3 client program, avoiding the need to use a Web browser.Damn Small Linux uses Lua to provide desktop-friendly interfaces for command-line utilities without sacrificing lots of disk space.LuaTeX, the designated successor of pdfTeX, allows extensions to be written in Lua.awesome 3.0 and up use lua for customization and configDolphin Computer Access uses Lua scripting to make inaccessible applications accessible for visually impaired computer users with their screen reader - SuperNova.eLua is a small Lua runtime for microcontrollers with special consideration for limited performance and low level hardware access.References[http://www.lua.org/manual/5.1/ Lua 5.1 Reference Manual] (online version of paper book) (ISBN 85-903798-3-3)[http://www.inf.puc-rio.br/~roberto/pil2/ Programming in Lua, Second Edition] (online first edition) (ISBN 85-903798-2-5)Game Development with Lua (ISBN 1-58450-404-8)[http://www.wrox.com/WileyCDA/WroxTitle/productCd-0470069171.html Beginning Lua Programming] (ISBN 978-0-470-06917-2)External linksLua official siteUser projects — list of applications using Lua, compiled by the authorslua-users.org — community website for and by users (and authors) of Lualua-users wiki — supplementary information and resourceslua-l archive — the official listLuai — an alternative interface to the reference manualIntroducing Lua — ONLamp.comAn Introduction to Lua — GameDev.netComputerworld Interview with Roberto Ierusalimschy on LuaCategory:Lua programming language Category:Scripting_languages Category:Object-oriented_programming_languages Category:Embedded systems Category:Virtual machines Category:Free compilers and interpreters Category:Free development toolkits and libraries Category:Cross-platform softwarecs:Lua da:Lua (programmeringssprog) de:Lua es:Lua eo:Lua eu:Lua fr:Lua gl:Lua (linguaxe de programación) ko:루아 (프로그래밍 언어) it:Lua ms:Lua nl:Lua (programmeertaal) ja:Lua pl:Lua pt:Lua (linguagem de programação) ru:Lua fi:Lua sv:Lua zh:Lua