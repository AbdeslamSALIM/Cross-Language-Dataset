A thread in computer science is short for a thread of execution. Threads are a way for a program to split itself into two or more simultaneously (or pseudo-simultaneously) running tasks (see also: fork). Threads and processes differ from one operating system to another but, in general, a thread is contained inside a process and different threads in the same process share some resources while different processes do not.On a single processor, Multithreading generally occurs by time-division multiplexing ("time slicing") in very much the same way as the parallel execution of multiple tasks (computer multitasking): the processor switches between different threads. This context switching can happen so fast as to give the illusion of simultaneity to an end user. On a multiprocessor or multi-core system, threading can be achieved via multiprocessing, wherein different threads and processes can run literally simultaneously on different processors or cores.Many modern operating systems directly support both time-sliced and multiprocessor threading with a process scheduler. The operating system kernel allows programmers to manipulate threads via the system call interface. Some implementations are called a kernel thread, whereas a lightweight process (LWP) is a specific type of kernel thread that shares the same state and information.Absent that, programs can still implement threading by using timers, signals, or other methods to interrupt their own execution and hence perform a sort of ad hoc time-slicing. These are sometimes called user-space threads.Threads compared with processesThread is distinguished from traditional multitasking operating system processes in that processes:are typically independent,carry considerable state information,have separate address spaces, andinteract only through system-provided inter-process communication mechanisms.Multiple threads, on the other hand, typically share the state information of a process, and share memory and other resources directly. Context switching between threads in the same process is typically faster than context switching between processes. Systems like Windows NT and OS/2 are said to have "cheap" threads and "expensive" processes; in other operating systems there is not so great a difference.Multithreading is a popular programming and execution model that allows multiple threads to exist within the context of a single process, sharing the process' resources but able to execute independently. The threaded programming model provides developers with a useful abstraction of concurrent execution. However, perhaps the most interesting application of the technology is when it is applied to a single process to enable parallel execution on a multiprocessor system.This advantage of a multithreaded program allows it to operate faster on computer systems that have multiple CPUs, CPUs with multiple cores, or across a cluster of machines. This is because the threads of the program naturally lend themselves to truly concurrent execution. In such a case, the programmer needs to be careful to avoid race conditions, and other non-intuitive behaviors. In order for data to be correctly manipulated, threads will often need to rendezvous in time in order to process the data in the correct order. Threads may also require atomic operations (often implemented using semaphores) in order to prevent common data from being simultaneously modified, or read while in the process of being modified. Careless use of such primitives can lead to deadlocks.Operating systems schedule threads in one of two ways. Preemptive multithreading is generally considered the superior approach, as it allows the operating system to determine when a context switch should occur. Cooperative multithreading, on the other hand, relies on the threads themselves to relinquish control once they are at a stopping point. This can create problems if a thread is waiting for a resource to become available. The disadvantage to preemptive multithreading is that the system may make a context switch at an inappropriate time, causing priority inversion or other bad effects which may be avoided by cooperative multithreading.Traditional mainstream computing hardware did not have much support for multithreading as switching between threads was generally already quicker than full process context switches. Processors in embedded systems, which have higher requirements for real-time behaviors, might support multithreading by decreasing the thread switch time, perhaps by allocating a dedicated register file for each thread instead of saving/restoring a common register file. In the late 1990s, the idea of executing instructions from multiple threads simultaneously has become known as simultaneous multithreading. This feature was introduced in Intel's Pentium 4 processor, with the name Hyper-threading.Processes, threads, and fibersA process is the "heaviest" unit of kernel scheduling. Processes own resources allocated by the operating system. Resources include memory, file handles, sockets, device handles, and windows. Processes do not share address spaces or file resources except through explicit methods such as inheriting file handles or shared memory segments, or mapping the same file in a shared way. Processes are typically preemptively multitasked. However, Windows 3.1 and older versions of Mac OS used cooperative or non-preemptive multitasking.A thread is the "lightest" unit of kernel scheduling. At least one thread exists within each process. If multiple threads can exist within a process, then they share the same memory and file resources. Threads are preemptively multitasked if the operating system's process scheduler is preemptive. Threads do not own resources except for a stack, a copy of the registers including the program counter, and thread-local storage (if any).In some situations, there is a distinction between "kernel threads" and "user threads" – the former are managed and scheduled by the kernel, whereas the latter are managed and scheduled in userspace. In this article, the term "thread" is used to refer to kernel threads, whereas "fiber" is used to refer to user threads. Fibers are cooperatively scheduled: a running fiber must explicitly "yield" to allow another fiber to run. A fiber can be scheduled to run in any thread in the same process.Thread and fiber issuesConcurrency and data structuresThreads in the same process share the same address space. This allows concurrently-running code to couple tightly and conveniently exchange data without the overhead or complexity of an IPC. When shared between threads, however, even simple data structures become prone to race hazards if they require more than one CPU instruction to update: two threads may end up attempting to update the data structure at the same time and find it unexpectedly changing underfoot. Bugs caused by race hazards can be very difficult to reproduce and isolate.To prevent this, threading APIs offer synchronization primitives such as mutexes to lock data structures against concurrent access. On uniprocessor systems, a thread running into a locked mutex must sleep and hence trigger a context switch. On multi-processor systems, the thread may instead poll the mutex in a spinlock. Both of these may sap performance and force processors in SMP systems to contend for the memory bus, especially if the granularity of the locking is fine.I/O and schedulingMany fiber implementations are entirely in userspace. As a result, context switching between fibers within the same process is extremely efficient because it does not require any interaction with the kernel at all: a context switch can be performed by locally saving the CPU registers used by the currently executing fiber and then loading the registers required by the fiber to be executed. Since scheduling occurs in userspace, the scheduling policy can be more easily tailored to the requirements of the program's workload.However, the use of blocking system calls in fibers can be problematic. If a fiber performs a system call that blocks, the other fibers in the process are unable to run until the system call returns. A typical example of this problem is when performing I/O: most programs are written to perform I/O synchronously. When an I/O operation is initiated, a system call is made, and does not return until the I/O operation has been completed. In the intervening period, the entire process is "blocked" by the kernel and cannot run, which starves other fibers in the same process from executing.A common solution to this problem is providing an I/O API that implements a synchronous interface by using non-blocking I/O internally, and scheduling another fiber while the I/O operation is in progress. Similar solutions can be provided for other blocking system calls. Alternatively, the program can be written to avoid the use of synchronous I/O or other blocking system calls.Win32 supplies a fiber API[http://msdn.microsoft.com/en-us/library/ms682402(VS.85).aspx CreateFiber, MSDN]. SunOS 4.x implemented "light-weight processes" or LWPs as fibers known as green threads. NetBSD 2.x+, and DragonFly BSD implement LWPs as threads as well (1:1 model). SunOS 5.2 through SunOS 5.8 as well as NetBSD 2 to NetBSD 4 implemented a two level model, multiplexing one or more user level fibers on each kernel thread (M:N model). SunOS 5.9 and later, as well as NetBSD 5 eliminated fiber support, returning to a 1:1 model. http://www.sun.com/software/whitepapers/solaris9/multithread.pdfThe use of kernel threads simplifies user code by moving some of the most complex aspects of threading into the kernel. The program doesn't need to schedule threads or explicitly yield the processor. User code can be written in a familiar procedural style, including calls to blocking APIs, without starving other threads. However, kernel threading on uniprocessor systems may force a context switch between threads at any time, and thus expose race hazards and concurrency bugs that would otherwise lie latent. On SMP systems, this is further exacerbated because kernel threads may actually execute concurrently on separate processors.shhModels1:11:1 threads created by the user are in 1-1 correspondence with schedulable entities in the kernel. This is the simplest possible threading implementation. On Linux, the usual C library implements this approach (via the NPTL).N:MN:M maps some N number of application threads onto some M number of kernel entities, or "virtual processors". This is a compromise between kernel-level ("1:1") and user-level ("N:1") threading. In general, "N:M" threading systems are more complex to implement than either kernel or user threads, because both changes to kernel and user-space code are required. In the m×n implementation, the threading library is responsible for scheduling user threads on the available schedulable entities; this makes context switching of threads very fast, as it avoids system calls. However, this increases complexity and the likelihood of priority inversion, as well as suboptimal scheduling without extensive (and expensive) coordination between the userland scheduler and the kernel scheduler.N:1An N:1 model implies that all application-level threads map on to a single kernel-level scheduled entity; as the kernel has no knowledge of the application threads, they are effectively fibers. With this approach, context switching can be done very fast and, in addition, it can be implemented even on simple kernels which do not support threading. One of the major drawbacks however is that it cannot benefit from the hardware acceleration on multi-threaded processors or multi-processor computers: there is never more than one thread being scheduled at the same time.ImplementationsThere are many different and incompatible implementations of threading. These include both kernel-level and user-level implementations.Note that fibers can be implemented without operating system support, although some operating systems or libraries provide explicit support for them. For example, Microsoft Windows (Windows NT 3.51 SP3 and later) support a fiber API for applications that want to gain performance improvements by managing scheduling themselves, instead of relying on the kernel scheduler (which may not be tuned for the application). Microsoft SQL Server 2000's user mode scheduler, running in fiber mode, is an example of doing this.User-level implementation examplesGNU Portable ThreadsFSU PthreadsApple Inc.'s Thread ManagerREALbasic (includes an API for cooperative threading)Netscape Portable Runtime (includes a user-space fibers implementation)Hybrid implementation examplesScheduler activations used by the NetBSD native POSIX threads library implementation (an N:M model as opposed to a 1:1 kernel or userspace implementation model)Marcel from the PM2 project.See alsoWin32 Thread Information BlockHardware: Multithreading (computer hardware), Multi-core (computing), Simultaneous multithreadingTheory: Communicating sequential processes, Computer multitasking, Message passingProblems: Thread safety, Priority inversionTechniques: Protothreads, Thread pool pattern, Lock-free and wait-free algorithmsReferencesDavid R. Butenhof: Programming with POSIX Threads, Addison-Wesley, ISBN 0-201-63392-2Bradford Nichols, Dick Buttlar, Jacqueline Proulx Farell: Pthreads Programming, O'Reilly & Associates, ISBN 1-56592-115-1Charles J. Northrup: Programming with UNIX Threads, John Wiley & Sons, ISBN 0-471-13751-0Mark Walmsley: Multi-Threaded Programming in C++, Springer, ISBN 1-85233-146-1Paul Hyde: Java Thread Programming, Sams, ISBN 0-672-31585-8Bill Lewis: Threads Primer: A Guide to Multithreaded Programming, Prentice Hall, ISBN 0-13-443698-9Steve Kleiman, Devang Shah, Bart Smaalders: Programming With Threads, SunSoft Press, ISBN 0-13-172389-8Pat Villani: Advanced WIN32 Programming: Files, Threads, and Process Synchronization, Harpercollins Publishers, ISBN 0-87930-563-0Jim Beveridge, Robert Wiener: Multithreading Applications in Win32, Addison-Wesley, ISBN 0-201-44234-5Thuan Q. Pham, Pankaj K. Garg: Multithreaded Programming with Windows NT, Prentice Hall, ISBN 0-13-120643-5Len Dorfman, Marc J. Neuberger: Effective Multithreading in OS/2, McGraw-Hill Osborne Media, ISBN 0-07-017841-0Alan Burns, Andy Wellings: Concurrency in ADA, Cambridge University Press, ISBN 0-521-62911-XUresh Vahalia: Unix Internals: the New Frontiers, Prentice Hall, ISBN 0-13-101908-2Alan L. Dennis: ''.Net Multithreading '', Manning Publications Company, ISBN 1-930110-54-5Tobin Titus, Fabio Claudio Ferracchiati, Srinivasa Sivakumar, Tejaswi Redkar, Sandra Gopikrishna: C# Threading Handbook, Peer Information Inc, ISBN 1-86100-829-5Tobin Titus, Fabio Claudio Ferracchiati, Srinivasa Sivakumar, Tejaswi Redkar, Sandra Gopikrishna: Visual Basic .Net Threading Handbook, Wrox Press Inc, ISBN 1-86100-713-2External linksArticle "Query by Slice, Parallel Execute, and Join: A Thread Pool Pattern in Java" by Binildas C. A.Ars Technica article about multithreading, etcAnswers to frequently asked questions for comp.programming.threadsThe C10K problemArticle "The Free Lunch Is Over: A Fundamental Turn Toward Concurrency in Software" by Herb SutterArticle "The Problem with Threads" by Edward LeeArticle "When is Multi-Threading a bad idea?" by Chris ReathPOSIX threads explained by Daniel RobbinsMultithreading in the Solaris Operating EnvironmentCategory:Operating system technology Category:Concurrent computing *ar:خيط (حاسوب) cs:Vlákno (program) de:Thread (Informatik) es:Hilo de ejecución fr:Processus léger ko:스레드 id:Thread is:Þráður he:תהליכון hu:Szál (számítástechnika) nl:Thread (informatica) ja:スレッド (コンピュータ) no:Tråd (informatikk) pl:Wątek (informatyka) pt:Thread (ciência da computação) ru:Многопоточность sk:Thread (multithreading) sr:Нит (рачунарство) sv:Tråd (datavetenskap) tr:Thread uk:Багатонитевість zh:多线程