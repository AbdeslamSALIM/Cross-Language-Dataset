 In computing, ZFS is a file system designed by Sun Microsystems for the Solaris Operating System. The features of ZFS include support for high storage capacities, integration of the concepts of filesystem and volume management, snapshots and copy-on-write clones, on-line integrity checking and repair, and RAID-Z. ZFS is implemented as open-source software, licensed under the Common Development and Distribution License (CDDL).HistoryZFS was designed and implemented by a team at Sun led by Jeff Bonwick. It was announced on September 14 2004. Source code for ZFS was integrated into the main trunk of Solaris development on October 31 2005 and released as part of build 27 of OpenSolaris on November 16 2005. Sun announced that ZFS was included in the 6/06 update to Solaris 10 in June 2006, one year after the opening of the OpenSolaris community.The name originally stood for "Zettabyte File System", but is now an orphan acronym.FeaturesStorage poolsUnlike traditional file systems, which reside on single devices and thus require a volume manager to use more than one device, ZFS filesystems are built on top of virtual storage pools called zpools. A zpool is constructed of virtual devices (vdevs), which are themselves constructed of block devices: files, hard drive partitions, or entire drives, with the last being the recommended usage. Block devices within a vdev may be configured in different ways, depending on needs and space available: non-redundantly (similar to RAID 0), as a mirror (RAID 1) of two or more devices, as a RAID-Z group of three or more devices, or as a RAID-Z2 group of four or more devices. The storage capacity of all vdevs is available to all of the file system instances in the zpool.A quota can be set to limit the amount of space a file system instance can occupy, and a reservation can be set to guarantee that space will be available to a file system instance.CapacityZFS is a 128-bit file system, so it can store 18 billion billion (1.84 × 1019) times more data than current 64-bit systems. The limitations of ZFS are designed to be so large that they will not be encountered in practice for some time. Some theoretical limits in ZFS are:264 — Number of snapshots of any file system248 — Number of entries in any individual directory16&nbsp;EiB (264 bytes) — Maximum size of a file system16&nbsp;EiB — Maximum size of a single file16&nbsp;EiB — Maximum size of any attribute256&nbsp;ZiB (278 bytes) — Maximum size of any zpool256 — Number of attributes of a file (actually constrained to 248 for the number of files in a ZFS file system)256 — Number of files in a directory (actually constrained to 248 for the number of files in a ZFS file system)264 — Number of devices in any zpool264 — Number of zpools in a system264 — Number of file systems in a zpoolProject leader Bonwick said, "Populating 128-bit file systems would exceed the quantum limits of earth-based storage. You couldn't fill a 128-bit storage pool without boiling the oceans." However, there are no known independent sources that verify this claim.Copy-on-write transactional modelZFS uses a copy-on-write transactional object model. All block pointers within the filesystem contain a 256-bit checksum of the target block which is verified when the block is read. Blocks containing active data are never overwritten in place; instead, a new block is allocated, modified data is written to it, and then any metadata blocks referencing it are similarly read, reallocated, and written. To reduce the overhead of this process, multiple updates are grouped into transaction groups, and an intent log is used when synchronous write semantics are required.Snapshots and clonesAn advantage of copy-on-write is that when ZFS writes new data, the blocks containing the old data can be retained, allowing a snapshot version of the file system to be maintained. ZFS snapshots are created very quickly, since all the data composing the snapshot is already stored; they are also space efficient, since any unchanged data is shared among the file system and its snapshots.Writeable snapshots ("clones") can also be created, resulting in two independent file systems that share a set of blocks. As changes are made to any of the clone file systems, new data blocks are created to reflect those changes, but any unchanged blocks continue to be shared, no matter how many clones exist.Dynamic stripingDynamic striping across all devices to maximize throughput means that as additional devices are added to the zpool, the stripe width automatically expands to include them; thus all disks in a pool are used, which balances the write load across them.Variable block sizesZFS uses variable-sized blocks of up to 128 kilobytes. The currently available code allows the administrator to tune the maximum block size used as certain workloads do not perform well with large blocks. Automatic tuning to match workload characteristics is contemplated.If data compression (LZJB) is enabled, variable block sizes are used. If a block can be compressed to fit into a smaller block size, the smaller size is used on the disk to use less storage and improve IO throughput (though at the cost of increased CPU use for the compression and decompression operations).Lightweight filesystem creationIn ZFS, filesystem manipulation within a storage pool is easier than volume manipulation within a traditional filesystem; the time and effort required to create or resize a ZFS filesystem is closer to that of making a new directory than it is to volume manipulation in some other systems.Additional capabilitiesExplicit I/O priority with deadline scheduling.Claimed globally optimal I/O sorting and aggregation.Multiple independent prefetch streams with automatic length and stride detection.Parallel, constant-time directory operations.End-to-end checksumming, allowing data corruption detection (and recovery if you have redundancy in the pool).Intelligent scrubbing and resilvering.&lt;/ref&gt;Load and space usage sharing between disks in the pool.&lt;/ref&gt;Ditto blocks: Metadata is replicated inside the pool, two or three times (according to metadata importance).&lt;/ref&gt; If the pool has several devices, ZFS tries to replicate over different devices. So a pool without redundancy can lose data if you find bad sectors, but metadata should be fairly safe even in this scenario.ZFS design (copy-on-write + superblocks) is safe when using disks with write cache enabled, if they support the cache flush commands issued by ZFS. This feature provides safety and a performance boost compared with some other filesystems.When entire disks are added to a ZFS pool, ZFS automatically enables their write cache. This is not done when ZFS only manages discrete slices of the disk, since it doesn't know if other slices are managed by non-write-cache safe filesystems, like UFS.Filesystem encryption is supported, though is currently in a beta stage.Cache managementZFS also uses the ARC, a new method for cache management, instead of the traditional Solaris virtual memory page cache.Adaptive EndiannessPools and their associated ZFS file systems can be moved between different platform architectures, including systems implementing different byte orders. The ZFS block pointer format stores filesystem metadata in an endian-adaptive way; individual metadata blocks are written with the native byte order of the system writing the block. When reading, if the stored endianness doesn't match the endianness of the system, the metadata is byte-swapped in memory.This does not affect the stored data itself; as is usual in POSIX systems, files appear to applications as simple arrays of bytes, so applications creating and reading data remain responsible for doing so in a way independent of the underlying system's endianness.LimitationsZFS doesn't support per-user or per-group quotas. Instead, it is possible to create user-owned filesystems, each with its own size limit. Intrinsically, there is no practical quota solution for the file systems shared among several users (such as team projects, for example), where the data cannot be separated per user, although it could be implemented on top of the ZFS stack.Capacity expansion is normally achieved by adding groups of disks as a vdev (stripe, RAID-Z, RAID-Z2, or mirrored). Newly written data will dynamically start to use all available vdevs. It is also possible to expand the array by iteratively swapping each drive in the array with a bigger drive and waiting for ZFS to heal itself — the heal time will depend on amount of stored information, not the disk size. If a snapshot is taken during this process, it will cause the heal to be restarted.It is currently not possible to reduce the number of vdevs in a pool nor otherwise reduce pool capacity. However, it is currently being worked on by the ZFS team. Still not available as of Solaris 10 05/08 (AKA update 5).It is not possible to add a disk to a RAID-Z or RAID-Z2 vdev. This feature appears very difficult to implement. You can however create a new RAIDZ vdev and add it to the zpool.You cannot mix vdev types in a zpool. For example, if you had a striped ZFS pool consisting of disks on a SAN, you cannot add the local-disks as a mirrored vdev.Reconfiguring storage requires copying data offline, destroying the pool, and recreating the pool with the new policy.ZFS is not a native cluster, distributed, or parallel file system and cannot provide concurrent access from multiple hosts as ZFS is a local file system. Sun's Lustre distributed filesystem will adapt ZFS as back-end storage for both data and metadata in version 1.8, which will be released in Q2 2008.Solaris implementation issuesThe current ZFS implementation (Solaris 10 11/06) has some issues administrators should know before deploying it. Many of these issues are scheduled to be addressed in future releases.ZFS root filesystem support is currently set to off on Solaris 10 default installations, since the standard installer still does not fully support ZFS roots. The ZFS Boot project successfully added boot support to the OpenSolaris project in March 2007.&lt;/ref&gt;&lt;ref&gt;&lt;/ref&gt; Bootable ZFS file systems are available for x86 systems in Solaris Indiana, and the Solaris Nevada installer supports ZFS boot on both SPARC and x86 platforms as of build 90 &lt;ref&gt;&lt;/ref&gt;.If a Solaris Zone is put on ZFS, the system cannot be upgraded; the OS will need to be reinstalled. This issue is planned to be addressed in a Solaris 10 update in 2007.A file "fsync" will commit to disk all pending modifications on the filesystem. That is, an "fsync" on a file will flush out all deferred (cached) operations to the filesystem (not the pool) in which the file is located. This can make some fsync() slow when running alongside a workload which writes a lot of data to filesystem cache.&lt;/ref&gt; The issue is currently fixed in the OpenSolaris code base.New vdevs can be added to a storage pool, but they cannot be removed. A vdev can be exchanged for a bigger one, but it cannot be removed (even if the size to be removed is less than the pool's unused space). The ability to shrink a zpool is a work in progress, but is said to be a very challenging problem. Originally targeted for Solaris 10 update 5, this is still not fixed in Solaris Nevada (up to build 95), so it is unlikely that this feature will appear in any Solaris 10 release until at least 2009. Refer to this zfs-discuss thread on OpenSolaris for updates. ZFS encourages creation of many filesystems inside the pool (for example, for quota control), but importing a pool with thousands of filesystems is a slow operation (can take minutes).ZFS uses a lot of CPU when doing small writes (for example, a single byte). There are two root causes, currently being worked on: a) Translating from znode to dnode is slower than necessary because ZFS doesn't use translation information it already has, and b) Current partial-block update code is very inefficient.&lt;/ref&gt;ZFS copy-on-write operation can degrade on-disk file layout (file fragmentation) when files are modified, decreasing performance..ZFS blocksize is configurable per filesystem, currently 128&nbsp;KB by default. Reads or writes which are smaller than the block size suffer a performance penalty. If your workload reads/writes data in fixed sizes (blocks), for example a database, you should (manually) configure ZFS blocksize equal to the application blocksize, for better performance and to conserve cache memory and disk bandwidth.ZFS only offlines a faulty hard disk if it can't be opened. Read/write errors or slow/timed-out operations do not currently cause a disk to be marked as faulty. This is fixed in Solaris Nevada via 6520519.There is work in progress to provide automatic and periodic disk scrubbing, in order to provide corruption detection and early disk-rotting detection. Currently the data scrubbing must be done manually with "zpool scrub" command.Current ZFS compression/decompression code is very fast, but the compression ratio is not comparable to gzip or similar algorithms. The gzip compression algorithm was added in Solaris Nevada as part of 6536606 and is planned for a Solaris 10 update in Spring 2008.&lt;/ref&gt;If a snapshot is taken or destroyed while the zpool is scrubbing/resilvering, the process will be restarted from the beginning.&lt;/ref&gt; This bug is now resolved in the OpenSolaris code base.Not all symbolic links are protected by ditto blocks.&lt;/ref&gt;&lt;ref&gt;&lt;/ref&gt;Swapping over ZVOL pseudo-devices can hang the system.&lt;/ref&gt;&lt;ref&gt;&lt;/ref&gt; This was resolved in the OpenSolaris code base at the same time that ZFS root/boot support was added for SPARC. Zvols can also be used as the system crash dump device. A separate zvol is required for swap and dump.If a non-redundant disk in a zpool goes offline the entire operating system will panic on the next read or write. This can be a problem when for example a large server has multiple filesystems used for different purposes - one filesystem failure shouldn't cause the entire system to go down. This is fixed with the zpool "failmode" option added in Nevada b77&lt;/ref&gt;&lt;ref&gt;&lt;/ref&gt;PlatformsZFS is part of Sun's own Solaris operating system and is thus available on both SPARC and x86-based systems. Since the code for ZFS is open source, a port to other operating systems and platforms can be produced without Sun's involvement.OpenSolarisOpenSolaris 2008.05 uses ZFS as its default filesystem. There are a half dozen 3rd party distributions.Nexenta OS, a complete GNU-based open source operating system built on top of the OpenSolaris kernel and runtime, includes a ZFS implementation, added in version alpha1. More recently, Nexenta Systems announced NexentaStor, their ZFS storage appliance providing NAS/SAN/iSCSI capabilities and based on Nexenta OS. NexentaStor includes a GUI that simplifies the process of utilizing ZFS.Nexenta announced in February of 2008 a significant release, called version NexentaCore Platform 1.0, of their operating system which serves as a basis for software appliances from Nexenta and other distributions. As of June 15 '08 "NexentaCore 2.0 Alpha1 Release (unstable)" is available. Nexenta downloads.BSDPawel Jakub Dawidek has ported and committed ZFS to FreeBSD in experimental capacity for inclusion in FreeBSD 7.0, released on February 28, 2008. The current recommendation is to use it only on amd64 platforms with sufficient memory but there is a newer port (uncommited yet) which fixes the memory issue.As a part of the 2007 Google Summer of Code a ZFS port was started for NetBSD.Mac OS X ServerIn a post on the opensolaris.org zfs-discuss mailing list, Apple Inc. announced it was porting ZFS to their Mac OS X operating system. From Mac OS X 10.5 Developer Seed 9A321, support for ZFS has been included, but lacks the ability to act as a root partition, noted above. Also, attempts to format local drives using ZFS were unsuccessful; this is a known bug.On June 6, 2007, Sun's CEO Jonathan I. Schwartz announced that Apple would make ZFS "the" filesystem in Mac OS 10.5 Leopard. Marc Hamilton, VP for Solaris Marketing later wrote to clarify that, in his opinion, Apple is planning to use ZFS in future versions of Mac OS X, but not necessarily as the default filesystem for Mac OS X 10.5 Leopard. In the release version of Mac OS X 10.5, ZFS is available in read-only mode from the command line, which lacks the possibility to create zpools or write to them, but Apple has also released the ""ZFS Beta Seed v1.1", which allows read-write access and the creation of zpools. Apple states at their Developer Connection site "This seed requires installation on systems running Leopard9A559 or later."  However, the installer for the "ZFS Beta Seed v1.1" has been reported to only work on version 10.5.0, and has not been updated for version 10.5.1 and above. As of January 2008, Apple provides read-write binaries and source, but they must be installed by hand. Alex Blewitt put together an installer for the 102-A binaries, which doesn't need any hand-holding to install.The current Mac OS Forge release of the Mac OS X ZFS project is version 119 and synchronized with the OpenSolaris ZFS SVN version 72 See: Mac OS X ZFS Project DownloadsApple has also unveiled support for ZFS in its development version of Mac OS X Server &quot;Snow Leopard&quot;, a 64-bit OS optimized for machines with multi-core processors. LinuxPorting ZFS to Linux is complicated by the fact that the GNU General Public License, which governs the Linux kernel, prohibits linking with code under certain licenses, such as CDDL, the license ZFS is released under. One solution to this problem is to port ZFS to Linux's FUSE system so the filesystem runs in userspace instead. A project to do this was sponsored by Google's Summer of Code program in 2006, and is in Beta stage as of March 2008. The ZFS on FUSE project is available here. Running a file system outside the kernel on traditional Unix-like systems can have a significant performance impact. However, NTFS-3G (another file system driver built on FUSE) performs well when compared to other traditional file system drivers. This shows that reasonable performance is possible with ZFS on Linux after proper optimization. Sun Microsystems has stated that a Linux port is being investigated.See alsoList of file systemsComparison of file systemsVeritas File System and Veritas Volume Manager — ZFS's main (cross-platform) competitorWrite Anywhere File Layout — a similar file system by NetAppNILFS — a Linux filesystem by Nippon Telegraph and Telephone (NTT) supporting snapshotsLZJB — data compression algorithm used in ZFSVersioning file systems - List of versioning file systemsReferencesExternal linksZFS Development Community and detailed ZFS DocumentationZFS Best Practices GuideZFS The Last word in File SystemsZFS Boot ProjectZFS Encryption ProjectSun's ZFS Learning Center Presentations on ZFS by Bill MooreCategory:Disk file systems Category:Sun Microsystems software Category:Compression file systems Category:RAIDca:ZFS cs:ZFS de:ZFS (Dateisystem) es:ZFS (sistema de archivos) eu:ZFS fr:ZFS it:ZFS (file system) he:ZFS nl:ZFS ja:ZFS no:ZFS pl:ZFS pt:ZFS ru:Zettabyte File System simple:ZFS sk:ZFS sv:ZFS th:ZFS uk:ZFS zh:ZFS