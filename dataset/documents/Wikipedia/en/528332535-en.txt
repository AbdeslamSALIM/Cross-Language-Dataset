 In its simplest embodiment, an object is an allocated region of storage. Since programming languages use variables to access objects, the terms object and variable are often used interchangeably. However, until memory is allocated, an object does not exist.In procedural programming, an object may contain data or instructions, but not both. (Instructions may take the form of a procedure or function.) In object-oriented programming, an object may be associated with both the data and the instructions that operate on that data.How an object is created depends on the language. In a prototype-based language (e.g., JavaScript) an object can be created by ex nihilo or based on an existing object. In a class-based language (e.g., Java), an object is created as an instance (or instantiation) of a class. The class forms a specification for the object.To give a real world analogy, a house is constructed according to a specification. Here, the specification is a blueprint that represents a class, and the constructed house represents the object.TheoryIn strictly mathematical branches of computer science the term object is used in a purely mathematical sense to refer to any "thing". While this interpretation is useful in the discussion of abstract theory, it is not concrete enough to serve as a primitive datatype in the discussion of more concrete branches (such as programming) that are closer to actual computation and information processing. Therefore, objects are still conceptual entities, but generally correspond directly to a contiguous block of computer memory of a specific size at a specific location. This is because computation and information processing ultimately require a form of computer memory. Objects in this sense are fundamental primitives needed to accurately define concepts such as references, variables, and name binding. This is why the rest of this article will focus on the concrete interpretation of object rather than the abstract one &ndash; object oriented programming.Note that although a block of computer memory can appear contiguous on one level of abstraction and incontiguous on another, the important thing is that it appears contiguous to the program that treats it as an object. That is, an object's private implementation details must not be exposed to clients of the object, and they must be able to change without requiring changes to client code. In particular, the size of the block of memory that forms the object must be able to change without changes to client code.Objects exist only within contexts that are aware of them; a piece of computer memory only holds an object if a program treats it as such (for example by reserving it for exclusive use by specific procedures and/or associating a data type with it). Thus, the lifetime of an object is the time during which it is treated as an object. This is why they are still conceptual entities, despite their physical presence in computer memory.In other words, abstract concepts that do not occupy memory space at runtime are, according to the definition, not objects; e.g., design patterns exhibited by a set of classes, data types in statically typed programs.Objects in object-oriented programmingIn object-oriented programming (OOP), an instance of a program (i.e. a program running in a computer) is treated as a dynamic set of interacting objects. Objects in OOP extend the more general notion of objects described above to include a very specific kind of typing, which among other things allows for:data members that represent the data associated with the object.methods that access the data members in predefined ways.In the case of most objects, the data members can only be accessed through the methods, making it easy to guarantee that the data will always remain in a well-defined state (class invariants will be enforced). Some languages do not make distinctions between data members and methods.In almost all object-oriented programming languages, a dot(.) operator is used to call a particular method/function of an object. For example, consider an arithmetic class named Arith_Class. This class contains functions like add(), subtract(), multiply() and divide(), that process results for two numbers sent to them. This class could be used to find the product of 78 and 69 by first of all creating an object of the class and then invoking its multiply method, as follows: 1  int result = 0;                           ''// Initialization''
 2  arith_Obj1 = new Arith_Class();           ''// Creating a new instance of Arith_Class''
 3  result = arith_Obj1.multiply(78,69);      ''// Product of 78 and 69 stored in result variable     In a language where each object is created from a class, an object is called an instance of that class. If each object has a type, two objects with the same class would have the same datatype. Creating an instance of a class is sometimes referred to as instantiating the class.A real-world example of an object would be "my dog", which is an instance of a type (a class) called "dog", which is a subclass of a class "animal". In the case of a polymorphic object, some details of its type can be selectively ignored, for example a "dog" object could be used by a function looking for an "animal". So could a "cat", because it too belongs to the class of "animal". While being accessed as an "animal", some member attributes of a "dog" or "cat" would remain unavailable, such as the "tail" attribute, because not all animals have tails.A ghost is an object that is unreferenced in a program, and can therefore serve no purpose. In a garbage-collected language, the garbage collector would mark the memory occupied by the object as free, although it would still contain the object's data until it was overwritten.Three properties characterize objects:Identity: the property of an object that distinguishes it from other objectsState: describes the data stored in the objectBehavior: describes the methods in the object's interface by which the object can be usedSome terms for specialized kinds of objects include:Singleton object: An object that is the only instance of its class during the lifetime of the program.Functor (function object): an object with a single method (in C++, this method would be the function operator, "operator()") that acts much like a function (like a C/C++ pointer to a function).Immutable object: an object set up with a fixed state at creation time and which does not vary afterward.First-class object: an object that can be used without restriction.Container: an object that can contain other objects.Factory object: an object whose purpose is to create other objects.Metaobject: an object from which other objects can be created (Compare with class, which is not necessarily an object)Prototype: a specialized metaobject from which other objects can be created by copyingGod object: an object that knows too much or does too much. The God object is an example of an anti-pattern.Antiobjects: a computational metaphor useful to conceptualize and solve hard problems often with massively parallel approaches by swapping computational foreground and background.Filter objectObjects and the Semantic WebThe Semantic Web can be seen as a distributed data objects framework, and therefore can be validly seen as an Object Oriented Framework  . It is also quite valid to use a UML diagram to express a Semantic Web graph.Both the Semantic Web and Object Oriented Programming have:ClassesAttributes (also known as Relationships)InstancesFurthering this, Linked Data also introduces Dereferenceable Unified Resource Identifiers, which provide Data-by-Reference which you find in Object Oriented Programming and Object Oriented Databases in the form of Object Identifiers.See alsoObject lifetimeObject copyDesign patternsBusiness objectActor modelExternal links[http://java.sun.com/docs/books/tutorial/java/concepts/object.html What Is an Object?] from The Java TutorialsReferencesCategory:Object-oriented programmingbs:Računarski objekat cs:Instance třídy da:Objekt (datalogi) de:Objekt (Programmierung) es:Objeto (programación) eo:Objekto (komputiko) fr:Objet (informatique) ga:Oibiacht (ríomhaireacht) ko:객체 (전산학) it:Oggetto (informatica) lt:Objektas (programavimas) nl:Object (informatica) ja:オブジェクト (プログラミング) pl:Obiekt (programowanie obiektowe) pt:Objeto ru:Объект (программирование) simple:Object (computer science) fi:Olio (ohjelmointi) ta:பொருள் (கணினியியல்) vi:Đối tượng (khoa học máy tính) uk:Об'єкт (програмування) zh:对象 (计算机科学)