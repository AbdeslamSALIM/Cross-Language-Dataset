A database trigger is procedural code that is automatically executed in response to certain events on a particular table in a database. Triggers can restrict access to specific data, perform logging, or audit data modifications.There are two classes of triggers, they are either "row triggers" or "statement triggers". Row triggers define an action for every row of a table, while statement triggers occur only once per INSERT, UPDATE, or DELETE statement. Triggers cannot be used to audit data retrieval via SELECT statements.Each class can be of several types. There are "BEFORE triggers" and "AFTER triggers" which identifies the time of execution of the trigger. There is also an "INSTEAD OF trigger" which is a trigger that will execute instead of the triggering statement.There are typically three triggering events that cause triggers to 'fire':INSERT event (as a new record is being inserted into the database).UPDATE event (as a record is being changed).DELETE event (as a record is being deleted).The trigger is used to automate DML condition process.The major features of database triggers, and their effects, are:do not accept parameters or arguments (but may store affected-data in temporary tables)cannot perform commit or rollback operations because they are part of the triggering SQL statement (only through autonomous transactions)can cause mutating table errors, if they are poorly written.Triggers in OracleIn addition to triggers that fire when data is modified, Oracle 9i supports triggers that fire when schema objects (that is, tables) are modified and when user logon or logoff events occur. These trigger types are referred to as "Schema-level triggers".Schema-level triggers *After CreationBefore AlterAfter AlterBefore DropAfter DropBefore LogoffAfter LogonThe two main types of triggers are: 1) Instead of Trigger 2) After TriggersTriggers in Microsoft SQL ServerMicrosoft SQL Server supports triggers either after or instead of an insert, update, or delete operation.'''Microsoft SQL Server supports triggers on tables and views with the constraint that a view can be referenced only by an INSTEAD OF trigger.Microsoft SQL Server 2005 introduced support for Data Definition Language (DDL) triggers, which can fire in reaction to a very wide range of events, including:'''Drop tableCreate tableAlter tableLogin eventsA full list is available on MSDN.Performing conditional actions in triggers (or testing data following modification) is done through accessing the temporary Inserted and Deleted tables.Visit MSDN for information on using Inserted and Deleted tablesTriggers in PostgreSQLPostgreSQL introduced support for triggers in 1997. The following functionality in SQL:2003 is not implemented in PostgreSQL:SQL allows triggers to fire on updates to specific columns; PostgreSQL does not support this feature.The standard allows the execution of a number of SQL statements other than SELECT, INSERT, UPDATE, such as CREATE TABLE as the triggered action.Synopsis:   CREATE TRIGGER name  
       ON table [ FOR [ EACH ]  ]
       EXECUTE PROCEDURE funcname ( arguments )Triggers in MySQLMySQL 5.0.2 introduced support for triggers. Some of the triggers MYSQL supports areINSERT TriggerUPDATE TriggerDELETE TriggerThe SQL:2003 standard mandates that triggers give programmers access to record variables by means of a syntax such as REFERENCING NEW AS n. For example, if a trigger is monitoring for changes to a salary column one could write a trigger like the following: CREATE TRIGGER salary_trigger
    BEFORE UPDATE ON employee_table
    REFERENCING NEW ROW AS n, OLD ROW AS o
    FOR EACH ROW
    IF n.salary &lt;&gt; o.salary THEN
       --make desired changes;
    END IF;Triggers in native XML database SednaSedna provides support for triggers based on XQuery. Triggers in Sedna were designed to be analogous to SQL:2003 triggers, but natively base on XML query and update languages (XPath, XQuery and XML update language).A trigger in Sedna is set on any nodes of an XML document stored in database. When these nodes are updated, the trigger automatically executes XQuery queries and updates specified in its body. For example, the following trigger tr3 cancels person node deletion if there are any open auctions referenced by this person:CREATE TRIGGER &quot;tr3&quot;  
    BEFORE DELETE  
    ON doc(&quot;auction&quot;)/site//person  
    FOR EACH NODE  
    DO  
    More details on the syntax, execution semantics and usage of Sedna triggers are available in Sedna Programmer's Guide.External linksMicrosoft SQL Server CREATE TRIGGERMicrosoft SQL Server DROP TRIGGERMySQL Database triggersDB2 CREATE TRIGGER statementOracle CREATE TRIGGERPostgreSQL CREATE TRIGGERSedna XQuery TriggersCategory:Database management systemscs:Trigger (databáze) de:Datenbanktrigger es:Trigger (base de datos) fr:Déclencheur it:Trigger (informatica) lv:Trigeris (DBPS) hu:Trigger (adatbázisok) nl:Trigger no:Utløsere (database) pl:Wyzwalacz pt:Gatilho (banco de dados) ru:Триггер (базы данных) tr:Trigger some more