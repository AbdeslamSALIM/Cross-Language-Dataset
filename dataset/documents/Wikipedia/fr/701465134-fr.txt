Le C++ est un langage de programmation permettant la programmation sous de multiples paradigmes comme, par exemple, la programmation procédurale, la programmation orientée objet et la programmation générique. C++ est actuellement le 3 langage le plus utilisé au mondeclassement des langages les plus utilisés (le 1 si on le regroupe avec le C). Le langage C++ n'appartient à personne et par conséquent n'importe qui peut l'utiliser sans payer de droits.HistoireBjarne Stroustrup a développé C++ au cours des années 1980, alors qu'il travaillait dans le laboratoire de recherche Bell d'AT&amp;T. Il s'agissait en l'occurrence d'améliorer le langage C. Il l'avait d'ailleurs nommé C with classes («  »). Les premières améliorations se concrétisèrent donc par la prise en charge des classes, ainsi que par de nombreuses autres fonctionnalités comme les fonctions virtuelles, la surcharge des opérateurs, l'héritage (simple ou multiple), les «  », la gestion des exceptions, etc.Le langage C++ est normalisé par l'ISO. Sa première normalisation date de 1998 (ISO/CEI 14882:1998), sa dernière de 2003 (ISO/CEI 14882:2003). La normalisation de 1998 standardise la base du langage (Core Language) ainsi que la bibliothèque standard du C++ ().En langage C, ++ est l'opérateur d'incrémentation, c'est-à-dire l'augmentation de la valeur d'une variable de 1. C'est pourquoi C++ porte ce nom : cela signifie que C++ est un niveau au-dessus du C. Il existe de nombreuses bibliothèques C++ en plus de celle qui est incluse dans la norme. Par ailleurs, C++ permet l'utilisation de l'ensemble des bibliothèques C existantes.Fonctionnalités introduites par C++On peut considérer que C++ « est du C » avec un ajout de fonctionnalités. Une remarque importante est à faire cependant : certains programmes syntaxiquement corrects en C ne le sont pas en C++.Les fonctionnalités ajoutées sont :les déclarations reconnues comme instructions (repris dans C99) ;les opérateurs new et delete pour la gestion d'allocation mémoire ;le type de données bool (booléen) ;les références ;le mot clé const pour définir des constantes (repris par C à la fin des années 1980) ;les fonctions inline (repris dans C99) ;les paramètres par défaut dans les fonctions ;les référentiels lexicaux (Espace de noms) et l'opérateur de résolution :: ;les classes, ainsi que tout ce qui y est lié : l'héritage, les fonctions membres, les fonctions membres virtuelles, les constructeurs et le destructeur ;la surcharge des opérateurs ;les templates ;la gestion d'exceptions ;l'identification de type pendant l'exécution (RTTI : ) ;le commentaire de fin de ligne introduit par « // » (existant dans BCPL, repris dans C99).La compilation d'un programme en C++ effectue également un contrôle plus minutieux sur le typage.Histoire du C++Stroustrup a commencé à travailler sur C avec classes en 1979. L'idée de créer un nouveau langage vient de l'expérience en programmation de Stroustrup pour sa thèse de doctorat. Stroustrup trouvait que Simula avait des fonctionnalités très utiles pour le développement de gros programmes mais qu'il était trop lent pour être utilisé en pratique (cela était dû à un problème d'implémentation du compilateur Simula), tandis que BCPL était rapide mais de trop bas niveau et non adapté au développement de gros logiciels. Quand Stroustrup commença à travailler aux laboratoires Bell, on lui demanda d'analyser le noyau UNIX en vue de faire du calcul distribué. Se rappelant sa thèse, Stroustrup commença à améliorer le langage C avec des fonctionnalités similaires à celle de Simula. C fut choisi parce qu'il est rapide, portable et d'usage général. En outre, il était une bonne base pour le principe original et fondateur de C++ : « vous ne payez pas pour ce que vous n'utilisez pas ». Dès le départ, le langage ajoutait à C la notion de classe (avec encapsulation des données), de classe dérivée, de vérification des types renforcés (typage fort), d'« inlining », et d'argument par défaut.Comme Stroustrup développait C avec classes, il écrivit CFront, un compilateur qui générait du code source C à partir de code source C avec classes. La première commercialisation se fit en octobre 1985.En 1983, le nom du langage passa de C avec classes à celui de « C++ ». Parmi les nouvelles fonctionnalités qui furent ajoutées au langage, il y avait les fonctions virtuelles, la surcharge des opérateurs et des fonctions, les références, les constantes, le contrôle du typage amélioré et les commentaires en fin de ligne. En 1985 fut publiée la première édition de , apportant ainsi une référence importante au langage qui n'avait pas encore de standard officiel. En 1989, c'est la sortie de la version 2.0 de C++. Parmi les nouvelles fonctionnalités, il y avait l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres constantes, et les membres protégés. En 1990,  (« ARM ») fut publié apportant les bases du futur standard. Les ajouts de fonctionnalités tardifs qu'il comportait couvraient les modèles, les exceptions, les espaces de noms, les nouvelles conversions et le type booléen.Comme le langage C++ évoluait, la bibliothèque standard évoluait de concert. La première addition à la bibliothèque standard de C++ concernait les flux d'entrées/sorties qui apportait les fonctionnalités nécessaires au remplacement des fonctions C traditionnelles telles que printf et scanf. Ensuite, parmi les additions les plus importantes, il y avait la Standard Template Library.Après des années de travail, un comité réunissant l'ANSI et l'ISO standardisa C++ en 1998 (ISO/CEI 14882:1998), l'année où le comité de standardisation se réunissait à Sophia Antipolis dans le sud de la France. Pendant quelques années après la sortie officielle du standard, le comité traita le rapport de problèmes et publia une version corrigée du standard C++ en 2003.Personne ne possède le langage C++. Il est libre de droit. Le document de standardisation n'est quant à lui pas disponible gratuitement.La bibliothèque standard (C++ standard library)La bibliothèque standard du C++ est en grande partie un sur-ensemble des fonctions disponibles dans la bibliothèque standard du C. Elle englobe la Standard Template Library (STL) qui met à la disposition du programmeur des outils puissants comme les collections (conteneurs) et les itérateurs.À l'origine, la STL était une bibliothèque développée par Alexander Stepanov qui travaillait pour Hewlett-Packard. Dans la norme, celle-ci n'est pas appelée STL, car elle est considérée comme faisant partie de la bibliothèque standard du C++. Toutefois, beaucoup de personnes l'appellent encore de cette manière pour distinguer d'une part, les fonctions d'entrées/sorties comprises dans cette bibliothèque et, d'autre part, celles fournies par la bibliothèque C.Comme en C, l'utilisation d'une bibliothèque se fait par l'intermédiaire de la directive #include (suivie du nom du fichier d'en-tête).La programmation orientée objet en C++C++ utilise les concepts de la programmation orientée objet et permet entre autres :La classification,L'encapsulation,La composition de classes,L'association de classes,L'héritage, qui permet le polymorphisme,L'abstraction,La généricité,La méta-programmationL'encapsulation en C++L'encapsulation permet de faire abstraction du fonctionnement interne (c'est-à-dire, l'implémentation) d'une classe et ainsi de ne se préoccuper que des services rendus par celle-ci. C++ implémente l'encapsulation en permettant de déclarer les membres d'une classe avec le mot réservé public, private ou protected. Ainsi, lorsqu'un membre est déclaré :public, il sera accessible depuis n'importe quelle fonction.private, il sera uniquement accessible d'une part, depuis les fonctions qui sont membres de la classe et, d'autre part, depuis les fonctions autorisées explicitement par la classe (par l'intermédiaire du mot réservé friend).protected, il aura les mêmes restrictions que s'il était déclaré private, mais il sera en revanche accessible par les classes filles.C++ n'impose pas l'encapsulation des membres dans leurs classes. On pourrait donc déclarer tous les membres publics, mais en perdant une partie des bénéfices apportés par la programmation orientée objet. Il est de bon usage de déclarer toutes les données privées, ou au moins protégées, et de rendre publiques les méthodes agissant sur ces données. Ceci permet de cacher les détails de l'implémentation de la classe.« Hello, world »Voici l'exemple de Hello world donné dans The C++ Programming Language, Third Edition de Bjarne Stroustrup : include int main()   Une importante notion de C++ sont les espaces de noms (. Dans un espace de noms sont définis des noms de fonctions et de variables. Ce mécanisme permet de résoudre les ambiguïtés lorsque plusieurs variables provenant de différents composants sont homonymes. Pour recourir à une fonction d'un espace de nom, l'opérateur de résolution de portée « :: » est utilisé.  std::cout  Ce code source fait appel à la variable globale cout définie dans l'espace de nom standard (std). Il est possible de spécifier un espace de nom précis à utiliser afin d'éviter d'avoir à recourir à l'opérateur de résolution de portée. Pour cela, le mot clé using est utilisé avec cette syntaxe :  using namespace nom_du_namespace;  Ainsi, pour utiliser la variable cout définie dans le namespace standard sans utiliser l'opérateur de résolution de portée, il est possible d'écrire :  using namespace std;  Cela est valable pour tous les espaces de noms. Cette instruction se place en général avant le début du code source proprement dit : include using namespace std; int main()  Déclaration de classeExemple de la déclaration de la classe MessageInternet comportant des attributs privés et des méthodes publiques dont le constructeur 'MessageInternet' :class MessageInternet
;Déclaration de templatesÀ quoi servent les templates ?Les templates permettent d'écrire des fonctions et des classes en paramétrant le type de certains de leurs constituants (type des paramètres ou type de retour pour une fonction, type des éléments pour une classe collection par exemple). Les templates permettent d'écrire du code générique, c'est-à-dire qui peut servir pour une famille de fonctions ou de classes qui ne diffèrent que par la valeur de ces paramètres.Paramètres des templatesLes paramètres peuvent être de différentes sortes:Types simples: class, struct, types élémentaires comme int, float, etc.Tableaux de taille constante, dont la taille, déduite par le compilateur, peut être utilisée dans l'instantiation du template.Constantes scalaires, c'est à dire de type dérivant des entiers (int, long, bool), mais ni double ou float (Car leur représentation binaire ne fait pas partie de la norme du langage C++).Templates: La définition d'un template peut être passée à un template, ce qui permet notamment de s'appuyer sur la définition abstraite, par exemple, d'un conteneur.Pointeurs ou références, à condition que leur valeur soit définie à l'édition de liens.Fonction membre, dont la signature et la classe doivent être aussi passés en paramètres.Membre d'une classe, dont le type et la classe doivent être aussi passés en paramètres du template.Pourquoi utiliser des templates ?En programmation, il faut parfois écrire de nombreuses versions d'une même fonction ou classe suivant les types de données manipulées.Par exemple, un tableau de int ou un tableau de double sont très semblables, et les fonctions de tri ou de recherche dans ces tableaux sont identiques au type près.En résumé, l'utilisation des templates permet de « paramétrer » le type des données manipulées.Avantages à utiliser des templatesécritures uniques pour les fonctions et les classes.moins d'erreurs dues à la réécriturePerformances améliorées grâce a la spécialisation en fonction des types de données.Exemple de templatesDans la bibliothèque standard C++, on trouve de nombreux templates. On citera à titre d'exemple, les entrées/sorties, les chaînes de caractères ou les conteneurs. Les classes string, istream, ostream et iostream sont toutes des instanciations de type char.Les fonctions de recherche et de tri sont aussi des templates écrits et utilisables avec de nombreux types. // La fonction template Max peut être appelée avec tout type copiable // et comparable avec l'opérateur  T Max(T a, T b) include int main() // fonction main  Dans la ligne float f = Max(1, 2.2), on doit explicitement donner le type float pour le type paramétré T car le compilateur ne déduit pas le type de T lorsqu'on passe en même temps un int (1) et un float (2.2f).Spécialisation des templatesUn template donné peut avoir plusieurs instantiations possibles selon les types donnés comme paramètres. Si un seul paramètre est spécialisé, on parle de spécialisation partielle. Ceci permet par exemple:De choisir un type de calcul selon qu'un type est un entier, un nombre flottant, une chaîne de caractères, etc. Spécialisons l'exemple précédent pour le cas des pointeurs de chaines de caractères : template  const char * Max(const char * a, const char * b)  D'effectuer au moment de la compilation des calculs arithmétiques, si et seulement si tous les arguments sont connus à ce moment. Un exemple classique est le calcul de la fonction factorielle: template struct CalcCompileTime ;template struct CalcCompileTime ; Le polymorphisme et les méthodes virtuelles en C++Le polymorphisme est mis en œuvre à l'aide du mécanisme des méthodes virtuelles en C++. Lorsqu'une méthode virtuelle est appelée, l'implémentation de la méthode exécutée est choisie en fonction du type réel de l'objet. L'appel n'est donc résolu qu'à l'exécution, le type de l'objet ne pouvant pas - a priori - être connu à la compilation. Un mot clé est alors introduit : virtual. Ce mot clé est placé devant la déclaration de la méthode.Le mot clé virtual, placé devant le prototype de la fonction, indique au compilateur que la fonction est susceptible d'être redéfinie dans une classe dérivée. Il suffit alors de dériver une classe et de définir une nouvelle fonction de même signature (même nom, paramètres compatibles - voir la notion de covariance). Ainsi l'appel de cette fonction sur un objet dont on ignore le type, mais accédé en tant qu'objet de la classe de base, pourra donner lieu à l'appel de la fonction définie dans la classe dérivée.Il est généralement conseillé d'utiliser le mot clé virtual devant la déclaration du destructeur de la classe de base, afin que celui des sous-classes soit appelé également lorsque le programme utilise un pointeur d'instance de la classe de base au lieu d'un pointeur d'instance de la classe dérivée si et seulement si la classe de base peut être utilisée pour manipuler des classes dérivées.Il convient de ne pas confondre ce mécanisme avec celui de surcharge. Dans le cas de la surcharge, le choix de la fonction à appeler s'effectue sur le nombre et le type des paramètres : l'appel est donc résolu dès la compilation.Bibliographie Bjarne Stroustrup, Le langage C++ - 4e édition, Édition PEARSON EDUCATION FRANCE 2003, , 1098 pagesBjarne Stroustrup, The Design and Evolution of C++, Addison-Wesley, 1st Ed., 1994, Claude Delannoy, Programmer en C++ - 5e édition, Édition EYROLLES 2006, , 616 pagesAurélien Geron, Fatmé Tawbi, Pour mieux développer avec C++, Édition DUNOD 1999, "C++ pour les nuls" aborde C++ uniquement sous console.ConstructionUn programme C++ peut être produit avec des outils qui automatisent le processus de construction. Les plus utilisés sont :MakeFile (Unix, Linux), Make (Windows)Ant (génération portable en XML)SCons (génération portable en Python).Cmake génération de MakeFile portableEnvironnements de développementIl existe de nombreux environnements de développement (certains sont libres) comme :Code::Blocks ;Dev-C++ et son probable successeur WxDev-C++ ;Anjuta ;KDevelop ;Eclipse avec le plugin CDTPlugin CDT pour Eclipse.QDevelop ;QtCreator ;NetBeans ;Xcode ;L'environnement de développement propriétaire le plus répandu est probablement Visual C++ de Microsoft. Il est payant mais une version limitée gratuite existe sous le nom Express EditionMicrosoft Visual C++ Express Edition.La société Borland propose également l'environnement C++ Builder, inspiré de Delphi.Compilateurs C++GNU Compiler Collection (UNIX, Windows, DOS, etc.)Microsoft Visual C++ (Windows)Microsoft Visual C++ Express Edition - Microsoft Visual C++ en version gratuite mais avec des fonctionnalités limitées (Win32)Borland C++ Builder (Windows)Intel C++ Compiler (Windows, Linux)''Comeau C++ CompilerVoir aussiLiens externes  Notes et référencesCatégorie:Langage de programmation Catégorie:Langage orienté objet Catégorie:Norme ISO Catégorie:C++af:C++ an:C++ ar:سي++ (لغة برمجة) az:C++ bat-smg:C++ be:C++ bg:C++ bn:সি++ br:Areg C++ bs:C++ bug:C++ ca:C++ cs:C++ da:C++ de:C++ el:C++ en:C++ eo:C++ es:C++ et:C++ eu:C++ fa:سی++ fi:C++ gl:C++ he:C++ hi:सी++ hr:C++ hu:C++ hy:C++ ia:C++ id:C++ is:C++ it:C++ ja:C++ ka:C++ kaa:C++ ko:C++ la:C++ lb:C++ lt:C++ lv:C++ ml:സി++ mr:सी प्लस प्लस प्रोग्रॅमिंग लँग्वेज ms:C++ nl:C++ nn:C++ no:C++ oc:C++ pl:C++ pt:C++ ro:C++ ru:C++ sh:C++ simple:C++ sk:C++ sl:C++ sq:C++ sr:C++ sv:C++ ta:சி++ te:సీ ప్లస్ ప్లస్ tg:C++ th:ภาษาซีพลัสพลัส tk:C++ tr:C++ uk:C++ vi:C++ zh:C++ zh-yue:C++