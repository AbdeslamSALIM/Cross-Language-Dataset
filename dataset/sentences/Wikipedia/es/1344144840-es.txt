public class LevenshteinDistance public static int computeLevenshteinDistance(String str1, String str2) private static int computeLevenshteinDistance(char [] str1, char [] str2) Perl'''sub''' fastdistance '''for''' (1.. $len2) '''for''' my $i (1.. $len1) '''return''' $d[$len1][$len2]; '''sub''' _min Python'''def''' distance(str1, str2): d=dict() '''for''' i '''in''' range(len(str1)+1): d[i]=dict() d[i][0]=i '''for''' i '''in''' range(len(str2)+1): d[0][i] = i '''for''' i '''in''' range(1, len(str1)+1): '''for''' j '''in''' range(1, len(str2)+1): d[i][j] = min(d[i][j-1]+1, d[i-1][j]+1, d[i-1][j-1]+('''not''' str1[i-1] == str2[j-1])) '''return''' d[len(str1)][len(str2)]Ruby def self.LevenshteinDistance(str1,str2) distance = Array.new(str1.size+1, 0) for i in 0..str1.size distance[i] = Array.new(str2.length+1) distance[i][0] = i end for j in 0..(str2.size) distance[0][j] = j end for i in 1..str1.size for j in 1..str2.size distance[i][j] = [distance[i-1][j]+1 , distance[i][j-1]+1 , distance[i-1][j-1]+((str1[i-1]==str2[j-1])? 0:1)].min end end return distance[str1.size][str2.size]; endDelphi function LevenshteinDistance(Str1, Str2: String): Integer; var d : array of array of Integer; Len1, Len2 : Integer; i,j,cost:Integer;begin Len1:=Length(Str1); Len2:=Length(Str2); SetLength(d,Len1+1); for i := Low(d) to High(d) do SetLength(d[i],Len2+1); for i := 0 to Len1 do d[i,0]:=i; for j := 0 to Len2 do d[0,j]:=j; for i:= 1 to Len1 do for j:= 1 to Len2 do begin if Str1[i]=Str2[j] then cost:=0 else cost:=1; d[i,j]:= Min(d[i-1, j] + 1, // deletion, Min(d[i, j-1] + 1, // insertion d[i-1, j-1] + cost) // substitution ); end; Result:=d[Len1,Len2];end; [[Macromedia ColdFusion|ColdFusion]] function levDistance(s,t) if (m is 1) for (i = 1; i lte n; i=i+1) for (j = 1; j lte m; j=j+1) for (i = 2; i lte n; i=i+1) else dij = min(di-1j+1, dij-1+1); dij = min(dij, di-1j-1 + cost); return d[n][m]; Véase tambiénDistancia de Damerau-Levenshteinalgoritmo Needleman-Wunschalgoritmo Smith-Watermanalgoritmo BitapAutómata de Levenshteinespacio métricoagrepRatcliff/ObershelpDynamic time warpingJaro-Winkler distanceCategoría:Programaciónaf:Levenshteinafstand de:Levenshtein-Distanz en:Levenshtein distance fi:Levenšteinin etäisyys fr:Distance de Levenshtein it:Distanza di Levenshtein ja:レーベンシュタイン距離 lv:Levenšteina attālums nl:Levenshteinafstand nn:Levenshtein-distanse pl:Odległość Levenshteina pt:Distância Levenshtein ru:Расстояние Левенштейна sr:Левенштајново растојање sv:Levenshteinavstånd tg:Масофаи Левенштейн uk:Відстань Левенштейна vi:Khoảng cách Levenshtein zh:編輯距離
